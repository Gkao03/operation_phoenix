
ECE477_SeniorDesign_RC_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e28  08000e28  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e28  08000e28  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000e28  08000e28  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e28  08000e28  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000e28  08000e28  00010e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08000e30  08000e30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000e38  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000004  08000e3c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000e3c  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000196e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000056c  00000000  00000000  000219a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000140  00000000  00000000  00021f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00022050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fd4d  00000000  00000000  00022168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000011c5  00000000  00000000  00041eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c24bf  00000000  00000000  0004307a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000044c  00000000  00000000  001055b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e10 	.word	0x08000e10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000e10 	.word	0x08000e10

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0d      	blt.n	80001f6 <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	f003 021f 	and.w	r2, r3, #31
 80001e4:	4907      	ldr	r1, [pc, #28]	; (8000204 <__NVIC_EnableIRQ+0x3c>)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	095b      	lsrs	r3, r3, #5
 80001ec:	2001      	movs	r0, #1
 80001ee:	fa00 f202 	lsl.w	r2, r0, r2
 80001f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100

08000208 <_ZN9ECE477_1723RobotMovementControllerC1Ev>:

	//Struct for controlling motors
	struct RobotMovementController
	{
		//Constructor
		RobotMovementController(void)
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
		{
			//Set all to forward by default
			this->backright_motor_dir 	= NONE;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2202      	movs	r2, #2
 8000214:	711a      	strb	r2, [r3, #4]
			this->backleft_motor_dir 	= NONE;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2202      	movs	r2, #2
 800021a:	70da      	strb	r2, [r3, #3]
			this->frontright_motor_dir 	= NONE;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2202      	movs	r2, #2
 8000220:	709a      	strb	r2, [r3, #2]
			this->frontleft_motor_dir 	= NONE;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2202      	movs	r2, #2
 8000226:	705a      	strb	r2, [r3, #1]
			//Set movement state to Idle
			this->current_movement_state = IDLE;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	715a      	strb	r2, [r3, #5]
			this->updatedLatchValueToTransmit = 0x00;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
		}
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4618      	mov	r0, r3
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr

08000242 <_ZN9ECE477_1723RobotMovementControllerD1Ev>:

		//Destructor (unused)
		~RobotMovementController(void){}
 8000242:	b480      	push	{r7}
 8000244:	b083      	sub	sp, #12
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4618      	mov	r0, r3
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv>:

		//Assign new motor values to shift register
		//int& ithBitPosition...Transmit
		// Incremented by 1 everytime the callback is called. Once it hits 8, the internal flag 'latchTriggerUpdateStatus' is rest, signalling for this function to not send
		// new values to the shift register
		void ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback(void)
 8000258:	b480      	push	{r7}
 800025a:	b089      	sub	sp, #36	; 0x24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
		{
			//FIRST - Do not update the shift register state if the latch value has not changed since this function was last called
			//Need to store value of previousLatchValue - make it static
			static uint8_t previousLatchValue = 0;
			if(previousLatchValue == this->updatedLatchValueToTransmit) return;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	4b3c      	ldr	r3, [pc, #240]	; (8000358 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x100>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d06e      	beq.n	800034a <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xf2>

			//Set LATCH low
			SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_LATCH;
 800026c:	4b3b      	ldr	r3, [pc, #236]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a3a      	ldr	r2, [pc, #232]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 8000272:	f023 0302 	bic.w	r3, r3, #2
 8000276:	6153      	str	r3, [r2, #20]

			//Wait
			for(unsigned int i = 0; i < 10000; i++);
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
 800027c:	69fb      	ldr	r3, [r7, #28]
 800027e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000282:	4293      	cmp	r3, r2
 8000284:	d803      	bhi.n	800028e <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x36>
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	3301      	adds	r3, #1
 800028a:	61fb      	str	r3, [r7, #28]
 800028c:	e7f6      	b.n	800027c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x24>

			//Transmit 8 bits to serial register
			for(int i = 0;i < 8; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	61bb      	str	r3, [r7, #24]
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	2b07      	cmp	r3, #7
 8000296:	dc4d      	bgt.n	8000334 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xdc>
			{
				//Set CLK low
				SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_CLK;
 8000298:	4b30      	ldr	r3, [pc, #192]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a2f      	ldr	r2, [pc, #188]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 800029e:	f023 0308 	bic.w	r3, r3, #8
 80002a2:	6153      	str	r3, [r2, #20]
				//Wait
				for(unsigned int i = 0; i < 10000; i++);
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d803      	bhi.n	80002ba <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x62>
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	3301      	adds	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
 80002b8:	e7f6      	b.n	80002a8 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x50>

				//Get the i'th bit position of latchValue
				//uint8_t ithBitValueOfLatchValueToTransmit = (this->updatedLatchValueToTransmit >> (7-i)) & 0x01;
				uint8_t ithBitValueOfLatchValueToTransmit = updatedLatchValueToTransmit & _BS((7-i));
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b25a      	sxtb	r2, r3
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	f1c3 0307 	rsb	r3, r3, #7
 80002c6:	2101      	movs	r1, #1
 80002c8:	fa01 f303 	lsl.w	r3, r1, r3
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	4013      	ands	r3, r2
 80002d0:	b25b      	sxtb	r3, r3
 80002d2:	72fb      	strb	r3, [r7, #11]

				//Transmit the bits of the latchValueToTransmit
				if (ithBitValueOfLatchValueToTransmit)
 80002d4:	7afb      	ldrb	r3, [r7, #11]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d006      	beq.n	80002e8 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x90>
				{
					SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_DATA;
 80002da:	4b20      	ldr	r3, [pc, #128]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a1f      	ldr	r2, [pc, #124]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	e005      	b.n	80002f4 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x9c>
				}
				else
				{
					SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_DATA;
 80002e8:	4b1c      	ldr	r3, [pc, #112]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a1b      	ldr	r2, [pc, #108]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 80002ee:	f023 0304 	bic.w	r3, r3, #4
 80002f2:	6153      	str	r3, [r2, #20]
				}

				for(unsigned int i = 0; i < 10000; i++);
 80002f4:	2300      	movs	r3, #0
 80002f6:	613b      	str	r3, [r7, #16]
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80002fe:	4293      	cmp	r3, r2
 8000300:	d803      	bhi.n	800030a <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xb2>
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	3301      	adds	r3, #1
 8000306:	613b      	str	r3, [r7, #16]
 8000308:	e7f6      	b.n	80002f8 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xa0>

				SHIFT_REGISTER_GPIO->ODR |= SHIFT_REGISTER_CLK;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a13      	ldr	r2, [pc, #76]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 8000310:	f043 0308 	orr.w	r3, r3, #8
 8000314:	6153      	str	r3, [r2, #20]
				//Wait
				for(unsigned int i = 0; i < 10000; i++);
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000320:	4293      	cmp	r3, r2
 8000322:	d803      	bhi.n	800032c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xd4>
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	3301      	adds	r3, #1
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	e7f6      	b.n	800031a <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xc2>
			for(int i = 0;i < 8; i++)
 800032c:	69bb      	ldr	r3, [r7, #24]
 800032e:	3301      	adds	r3, #1
 8000330:	61bb      	str	r3, [r7, #24]
 8000332:	e7ae      	b.n	8000292 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x3a>
			}

			//Set LATCH high
			SHIFT_REGISTER_GPIO->ODR |= SHIFT_REGISTER_LATCH;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a08      	ldr	r2, [pc, #32]	; (800035c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x104>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6153      	str	r3, [r2, #20]

			//Update previous latch value
			previousLatchValue = this->updatedLatchValueToTransmit;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	781a      	ldrb	r2, [r3, #0]
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x100>)
 8000346:	701a      	strb	r2, [r3, #0]
 8000348:	e000      	b.n	800034c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xf4>
			if(previousLatchValue == this->updatedLatchValueToTransmit) return;
 800034a:	bf00      	nop
		}
 800034c:	3724      	adds	r7, #36	; 0x24
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000020 	.word	0x20000020
 800035c:	40020000 	.word	0x40020000

08000360 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv>:
			SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_LATCH;
			SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_DATA;
		}


		void SetLatchPinsToDefaultState(void)
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
		{
			SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_LATCH;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 800036e:	f043 0302 	orr.w	r3, r3, #2
 8000372:	6153      	str	r3, [r2, #20]
			//This needs to always be low
			SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_ENABLE;
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 800037a:	f023 0310 	bic.w	r3, r3, #16
 800037e:	6153      	str	r3, [r2, #20]
			SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_DATA;
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 8000386:	f023 0304 	bic.w	r3, r3, #4
 800038a:	6153      	str	r3, [r2, #20]
			SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_CLK;
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6153      	str	r3, [r2, #20]

			this->SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 8000398:	2100      	movs	r1, #0
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f80a 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
			this->ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff ff59 	bl	8000258 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv>
		}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40020000 	.word	0x40020000

080003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>:


		//Set current movement state
		void SetCurrentMovementStateAndUpdateMotorDirection(ROBOT_MOVEMENT_STATE newState)
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
		{
			//Store the new state
			this->current_movement_state = newState;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	78fa      	ldrb	r2, [r7, #3]
 80003c4:	715a      	strb	r2, [r3, #5]
			//Update motor directions
			switch(this->current_movement_state)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	795b      	ldrb	r3, [r3, #5]
 80003ca:	2b06      	cmp	r3, #6
 80003cc:	d86b      	bhi.n	80004a6 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf2>
 80003ce:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x20>)
 80003d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d4:	080003f1 	.word	0x080003f1
 80003d8:	0800040b 	.word	0x0800040b
 80003dc:	08000425 	.word	0x08000425
 80003e0:	0800043f 	.word	0x0800043f
 80003e4:	08000459 	.word	0x08000459
 80003e8:	08000473 	.word	0x08000473
 80003ec:	0800048d 	.word	0x0800048d
			{
				//IDLE: Robot is not moving
				case IDLE:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= NONE;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2202      	movs	r2, #2
 80003f4:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= NONE;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2202      	movs	r2, #2
 80003fa:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= NONE;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2202      	movs	r2, #2
 8000400:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= NONE;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2202      	movs	r2, #2
 8000406:	705a      	strb	r2, [r3, #1]
					break;
 8000408:	e04e      	b.n	80004a8 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case FULL_FORWARD:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= FORWARD;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= FORWARD;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2200      	movs	r2, #0
 800041a:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= FORWARD;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2200      	movs	r2, #0
 8000420:	705a      	strb	r2, [r3, #1]
					break;
 8000422:	e041      	b.n	80004a8 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case FULL_REVERSE:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= REVERSE;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= REVERSE;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= REVERSE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2201      	movs	r2, #1
 8000434:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= REVERSE;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	705a      	strb	r2, [r3, #1]
					break;
 800043c:	e034      	b.n	80004a8 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case TANK_ROTATE_LEFT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2200      	movs	r2, #0
 8000442:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= REVERSE;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2201      	movs	r2, #1
 8000448:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= FORWARD;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= REVERSE;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2201      	movs	r2, #1
 8000454:	705a      	strb	r2, [r3, #1]
					break;
 8000456:	e027      	b.n	80004a8 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case TANK_ROTATE_RIGHT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= REVERSE;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2201      	movs	r2, #1
 800045c:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= FORWARD;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= REVERSE;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2201      	movs	r2, #1
 8000468:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= FORWARD;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2200      	movs	r2, #0
 800046e:	705a      	strb	r2, [r3, #1]
					break;
 8000470:	e01a      	b.n	80004a8 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case SOFT_ROTATE_LEFT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2200      	movs	r2, #0
 8000476:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= NONE;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2202      	movs	r2, #2
 800047c:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= FORWARD;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= NONE;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2202      	movs	r2, #2
 8000488:	705a      	strb	r2, [r3, #1]
					break;
 800048a:	e00d      	b.n	80004a8 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>


				case SOFT_ROTATE_RIGHT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= NONE;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2202      	movs	r2, #2
 8000490:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= FORWARD;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2200      	movs	r2, #0
 8000496:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= NONE;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2202      	movs	r2, #2
 800049c:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= FORWARD;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2200      	movs	r2, #0
 80004a2:	705a      	strb	r2, [r3, #1]
					break;
 80004a4:	e000      	b.n	80004a8 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				//Default case. Shouldn't be a problem.
				default: break;
 80004a6:	bf00      	nop
			}
			//Update the latchValueToTransmit based on our updated movement control state
			UpdateMotorEnableDirectionInLatchValueToTransmit(FRONT_LEFT, this->frontleft_motor_dir);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	785b      	ldrb	r3, [r3, #1]
 80004ac:	461a      	mov	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f000 f819 	bl	80004e8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(FRONT_RIGHT, this->frontright_motor_dir);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	789b      	ldrb	r3, [r3, #2]
 80004ba:	461a      	mov	r2, r3
 80004bc:	2101      	movs	r1, #1
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f000 f812 	bl	80004e8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(BACK_LEFT, this->backleft_motor_dir);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	78db      	ldrb	r3, [r3, #3]
 80004c8:	461a      	mov	r2, r3
 80004ca:	2103      	movs	r1, #3
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f000 f80b 	bl	80004e8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(BACK_RIGHT, this->backright_motor_dir);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	461a      	mov	r2, r3
 80004d8:	2102      	movs	r1, #2
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f804 	bl	80004e8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
		}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>:
		uint8_t updatedLatchValueToTransmit;

		//Private member variables and functions
		private:

		void UpdateMotorEnableDirectionInLatchValueToTransmit(MOTOR_ID motor, MOTOR_DIRECTION direction)
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	70fb      	strb	r3, [r7, #3]
 80004f4:	4613      	mov	r3, r2
 80004f6:	70bb      	strb	r3, [r7, #2]
		{
			//CAUTION! - to move forward the motors on the left and right of the chassis need 'reversed' polarity / direction to move forward or back. Think about what happens when you take a motor on the left and flip it 180. If you set all motors to same direction the robot will rotate around
			//its center
			if(motor == FRONT_RIGHT)
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d134      	bne.n	8000568 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
			{
				//Look at the direction
				if(direction == NONE)
 80004fe:	78bb      	ldrb	r3, [r7, #2]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d10e      	bne.n	8000522 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x3a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_A;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	f023 0320 	bic.w	r3, r3, #32
 800050c:	b2da      	uxtb	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_B;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800051a:	b2da      	uxtb	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e022      	b.n	8000568 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				}
				else if(direction == FORWARD)
 8000522:	78bb      	ldrb	r3, [r7, #2]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10e      	bne.n	8000546 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x5e>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_FR_A;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	b2da      	uxtb	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_B;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800053e:	b2da      	uxtb	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	701a      	strb	r2, [r3, #0]
 8000544:	e010      	b.n	8000568 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				}
				else if(direction == REVERSE)
 8000546:	78bb      	ldrb	r3, [r7, #2]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d10d      	bne.n	8000568 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_A;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	f023 0320 	bic.w	r3, r3, #32
 8000554:	b2da      	uxtb	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit |=  MOTOR_FR_B;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000562:	b2da      	uxtb	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	701a      	strb	r2, [r3, #0]
				}
			}

			if(motor == BACK_RIGHT)
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d134      	bne.n	80005d8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
			{
				//Look at the direction
				if(direction == NONE)
 800056e:	78bb      	ldrb	r3, [r7, #2]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d10e      	bne.n	8000592 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xaa>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_A;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	f023 0301 	bic.w	r3, r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_B;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800058a:	b2da      	uxtb	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	701a      	strb	r2, [r3, #0]
 8000590:	e022      	b.n	80005d8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				}
				else if(direction == FORWARD)
 8000592:	78bb      	ldrb	r3, [r7, #2]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10e      	bne.n	80005b6 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xce>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_BR_A;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_B;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	e010      	b.n	80005d8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				}
				else if(direction == REVERSE)
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d10d      	bne.n	80005d8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_A;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	f023 0301 	bic.w	r3, r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit |=  MOTOR_BR_B;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	701a      	strb	r2, [r3, #0]
				}
			}
//DIFFERENT SIDES OF CHASSIS -------------------------------------------------------------------------------
			if(motor == FRONT_LEFT)
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d134      	bne.n	8000648 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
			{
				//Look at the direction
				if(direction == NONE)
 80005de:	78bb      	ldrb	r3, [r7, #2]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d10e      	bne.n	8000602 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x11a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_A;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	f023 0304 	bic.w	r3, r3, #4
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_B;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	f023 0308 	bic.w	r3, r3, #8
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	e022      	b.n	8000648 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				}
				else if(direction == FORWARD)
 8000602:	78bb      	ldrb	r3, [r7, #2]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10e      	bne.n	8000626 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x13e>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_A;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f023 0304 	bic.w	r3, r3, #4
 8000610:	b2da      	uxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit |=  MOTOR_FL_B;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	b2da      	uxtb	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e010      	b.n	8000648 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				}
				else if(direction == REVERSE)
 8000626:	78bb      	ldrb	r3, [r7, #2]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d10d      	bne.n	8000648 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_FL_A;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_B;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	f023 0308 	bic.w	r3, r3, #8
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	701a      	strb	r2, [r3, #0]
				}
			}
			if(motor == BACK_LEFT)
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d134      	bne.n	80006b8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
			{
				//Look at the direction
				if(direction == NONE)
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d10e      	bne.n	8000672 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x18a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_A;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f023 0302 	bic.w	r3, r3, #2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f023 0310 	bic.w	r3, r3, #16
 800066a:	b2da      	uxtb	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	701a      	strb	r2, [r3, #0]
				{
					this->updatedLatchValueToTransmit |=  MOTOR_BL_A;
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
				}
			}
		}
 8000670:	e022      	b.n	80006b8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
				else if(direction == FORWARD)
 8000672:	78bb      	ldrb	r3, [r7, #2]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10e      	bne.n	8000696 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1ae>
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_A;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f023 0302 	bic.w	r3, r3, #2
 8000680:	b2da      	uxtb	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit |=  MOTOR_BL_B;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	b2da      	uxtb	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	701a      	strb	r2, [r3, #0]
		}
 8000694:	e010      	b.n	80006b8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
				else if(direction == REVERSE)
 8000696:	78bb      	ldrb	r3, [r7, #2]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10d      	bne.n	80006b8 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
					this->updatedLatchValueToTransmit |=  MOTOR_BL_A;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f023 0310 	bic.w	r3, r3, #16
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	701a      	strb	r2, [r3, #0]
		}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachineC1Ev>:
	enum SHIFT_REG_STATES{STANDBY, LATCH, CLK_RST, TRANSFER_BIT, CLK_SET, UNLATCH};

	struct ShiftRegisterUpdateStateMachine
	{
		//Constructor
		ShiftRegisterUpdateStateMachine(void)
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
		{
			this->currentBitToSend 	= 0;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
			this->beginTransmit 	= false;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	711a      	strb	r2, [r3, #4]
			this->current_state 		= STANDBY;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	715a      	strb	r2, [r3, #5]
		}
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <_ZNK9ECE477_1731ShiftRegisterUpdateStateMachine26ReadyToUpdateShiftRegisterEv>:
		bool IsCurrentlyUpdatingShiftRegister(void) const
		{
			return this->current_state != STANDBY;
		}

		bool ReadyToUpdateShiftRegister(void) const
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
		{
			return this->current_state == STANDBY;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	795b      	ldrb	r3, [r3, #5]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
		}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh>:

		//Update FSM
		void UpdateState(uint8_t latchValueToTransmit)
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
		{
			//Observe current state
			switch(this->current_state)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	2b05      	cmp	r3, #5
 8000722:	f200 8083 	bhi.w	800082c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11c>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x1c>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	08000745 	.word	0x08000745
 8000730:	08000763 	.word	0x08000763
 8000734:	08000777 	.word	0x08000777
 8000738:	0800078b 	.word	0x0800078b
 800073c:	080007e3 	.word	0x080007e3
 8000740:	08000819 	.word	0x08000819
			{
				//Standby state
				case STANDBY:
				{
					//Start transmitting? Check it
					if(this->beginTransmit == true)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d006      	beq.n	800075a <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x4a>
					{
						this->current_state = LATCH;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2201      	movs	r2, #1
 8000750:	715a      	strb	r2, [r3, #5]
						//Reset beginTransmit
						this->beginTransmit = false;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	711a      	strb	r2, [r3, #4]
					}
					else
					{
						this->current_state = STANDBY;
					}
				}break;
 8000758:	e069      	b.n	800082e <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>
						this->current_state = STANDBY;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	715a      	strb	r2, [r3, #5]
				}break;
 8000760:	e065      	b.n	800082e <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case LATCH:
				{
					//Set LATCH low
					SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_LATCH;
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a35      	ldr	r2, [pc, #212]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 8000768:	f023 0302 	bic.w	r3, r3, #2
 800076c:	6153      	str	r3, [r2, #20]
					//Go to CLK_RST
					this->current_state = CLK_RST;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2202      	movs	r2, #2
 8000772:	715a      	strb	r2, [r3, #5]
				}break;
 8000774:	e05b      	b.n	800082e <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case CLK_RST:
				{
					//Set CLK low
					SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_CLK;
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a30      	ldr	r2, [pc, #192]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 800077c:	f023 0308 	bic.w	r3, r3, #8
 8000780:	6153      	str	r3, [r2, #20]
					//Transfer a bit next!
					this->current_state = TRANSFER_BIT;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2203      	movs	r2, #3
 8000786:	715a      	strb	r2, [r3, #5]
				}break;
 8000788:	e051      	b.n	800082e <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case TRANSFER_BIT:
				{
					//Get bit to transfer
					uint8_t ithBitValueOfLatchValueToTransmit = latchValueToTransmit & _BS((7-(this->currentBitToSend)));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f1c3 0307 	rsb	r3, r3, #7
 8000792:	2201      	movs	r2, #1
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800079e:	4013      	ands	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73fb      	strb	r3, [r7, #15]
					//Set HI or LOW depending on the bit value at index 'i'
					if (ithBitValueOfLatchValueToTransmit)
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0xa8>
					{
						SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_DATA;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	e005      	b.n	80007c4 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0xb4>
					}
					else
					{
						SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_DATA;
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a1f      	ldr	r2, [pc, #124]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80007be:	f023 0304 	bic.w	r3, r3, #4
 80007c2:	6153      	str	r3, [r2, #20]
					}

					//LED go brrrt
					GPIOD->ODR |= _BS(13); //Turn on orange LED
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x130>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x130>)
 80007ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ce:	6153      	str	r3, [r2, #20]

					//Increment bit value
					this->currentBitToSend++;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]

					//Go to CLK_SET
					this->current_state = CLK_SET;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2204      	movs	r2, #4
 80007de:	715a      	strb	r2, [r3, #5]
				}break;
 80007e0:	e025      	b.n	800082e <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case CLK_SET:
				{
					//LED go brrrt
					GPIOD->ODR &= ~_BS(13); //Turn on orange LED
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x130>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x130>)
 80007e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007ec:	6153      	str	r3, [r2, #20]

					//Set CLK high.
					SHIFT_REGISTER_GPIO->ODR |= SHIFT_REGISTER_CLK;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6153      	str	r3, [r2, #20]
					//check currentBitToSend
					//This should be 8 because the currentBitToSend will be 7 (last bit) before incrementing in TRANSFER_BIT. Therefore it will be 8 when arriving to this state.
					if(currentBitToSend >= 8)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	dd06      	ble.n	8000810 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x100>
					{
						//Reset currentBitToSend, and go to UNLATCH
						currentBitToSend = 0;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
						this->current_state = UNLATCH;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2205      	movs	r2, #5
 800080c:	715a      	strb	r2, [r3, #5]
					//We have more bits to send. Loop back to CLK_RST
					else
					{
						this->current_state = CLK_RST;
					}
				}break;
 800080e:	e00e      	b.n	800082e <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>
						this->current_state = CLK_RST;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2202      	movs	r2, #2
 8000814:	715a      	strb	r2, [r3, #5]
				}break;
 8000816:	e00a      	b.n	800082e <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case UNLATCH:
				{
					//Set LATCH high
					SHIFT_REGISTER_GPIO->ODR |= SHIFT_REGISTER_LATCH;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	6153      	str	r3, [r2, #20]
					//Go to standby next
					this->current_state = STANDBY;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
				}break;
 800082a:	e000      	b.n	800082e <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				default: break;
 800082c:	bf00      	nop
			}
		}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020c00 	.word	0x40020c00

08000844 <TIM3_IRQHandler>:
extern ECE477_17::ShiftRegisterUpdateStateMachine shiftRegisterStateMachine;

extern "C"
{
	void TIM3_IRQHandler(void)
	{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
		//Update state machine as necessary
		shiftRegisterStateMachine.UpdateState(movementController.updatedLatchValueToTransmit);
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <TIM3_IRQHandler+0x1c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <TIM3_IRQHandler+0x20>)
 8000850:	f7ff ff5e 	bl	8000710 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh>

		//Zero out SR so we indicate we have finished the interrupt routine (else get stuck here.... forever!)
		TIM3->SR = 0;
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <TIM3_IRQHandler+0x24>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
	}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000048 	.word	0x20000048
 8000864:	20000050 	.word	0x20000050
 8000868:	40000400 	.word	0x40000400

0800086c <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv>:
namespace ECE477_17
{
	namespace Timer
	{
		void GPIOA_ShiftRegisterPins_Init(void)
		{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
			RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOAEN;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x74>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x74>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6313      	str	r3, [r2, #48]	; 0x30

			GPIOA->MODER 	|= ( _BS(2) | _BS(4) | _BS(6) | _BS(8) ); //Set output mode for GPIOA 1-4
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 8000882:	f443 73aa 	orr.w	r3, r3, #340	; 0x154
 8000886:	6013      	str	r3, [r2, #0]
			GPIOA->OSPEEDR 	|= ( _BS(2) | _BS(3) | _BS(4) | _BS(5) | _BS(6) | _BS(7) | _BS(8) | _BS(9) );
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 800088e:	f443 737f 	orr.w	r3, r3, #1020	; 0x3fc
 8000892:	6093      	str	r3, [r2, #8]
			GPIOA->ODR   	= 0; //Everything is 0 by default
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]

			//Enable GPIOD for blue LED
			RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIODEN;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x74>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x74>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOD->MODER 	|= _BS(28) | _BS(26); //Set GPIOD 14,13 to output mode
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80008ac:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 80008b0:	6013      	str	r3, [r2, #0]
			GPIOD->ODR   	= 0; //Everything is 0 by default
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
			GPIOD->ODR 		|= _BS(14);
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c2:	6153      	str	r3, [r2, #20]
			GPIOD->PUPDR	= 0;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
			GPIOD->OSPEEDR  |= _BS(28) | _BS(26);
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80008d0:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 80008d4:	6093      	str	r3, [r2, #8]
		}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020c00 	.word	0x40020c00

080008ec <_ZN9ECE477_175Timer13TIM1_PWM_InitEv>:

		//Initialize TIM1 and its 4 Channels
		void TIM1_PWM_Init(void)
		{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
			//Enable Clock to TIM1, GPIOE (PWM GPIO pins)
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a2a      	ldr	r2, [pc, #168]	; (80009a0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
			RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6453      	str	r3, [r2, #68]	; 0x44

			//Select TIM1 Channels for PE9,11,13,14
			GPIOE->AFR[1] 	= ( _BS(4) | _BS(12) | _BS(20) | _BS(24) ); //Choose AF's
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 800090a:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOE->MODER  	= ( _BS(19) | _BS(23) | _BS(27) | _BS(29) ); //Set to AF mode
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 8000910:	4a26      	ldr	r2, [pc, #152]	; (80009ac <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc0>)
 8000912:	601a      	str	r2, [r3, #0]
			GPIOE->OSPEEDR 	= ( _BS(19) | _BS(23) | _BS(27) | _BS(29) ); //Set to high speed
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 8000916:	4a25      	ldr	r2, [pc, #148]	; (80009ac <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc0>)
 8000918:	609a      	str	r2, [r3, #8]
			GPIOE->PUPDR	= 0;
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]

			//Setup TIM1
			//Recall: System runs at 25MHz, and we want 8kHz???
			TIM1->ARR = 2500-1;
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000922:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC = 200-1;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 800092a:	22c7      	movs	r2, #199	; 0xc7
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
			//TIM1->DIER |= _BS(0); //Enable UIE
			//TIM1->EGR  |= _BS(0); //Generate update
			TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; //Set PWM Mode
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000934:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000938:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800093c:	6193      	str	r3, [r2, #24]
			TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000944:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000948:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800094c:	61d3      	str	r3, [r2, #28]
			TIM1->CCR1	= 2500;
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000950:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 	= 2500;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000958:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3	= 2500;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000960:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000964:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4	= 2500;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000968:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800096c:	641a      	str	r2, [r3, #64]	; 0x40

			//Duty Cycle is CCRX / ARR
			TIM1->CCER  |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000974:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8000978:	f043 0311 	orr.w	r3, r3, #17
 800097c:	6213      	str	r3, [r2, #32]
			TIM1->BDTR  |= TIM_BDTR_MOE;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44

			TIM1->CR1  |= TIM_CR1_CEN; //Count enable
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6013      	str	r3, [r2, #0]
		}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	01101010 	.word	0x01101010
 80009ac:	28880000 	.word	0x28880000
 80009b0:	40010000 	.word	0x40010000

080009b4 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm>:
		//Stop PWM.
		void TIM1_StopPWM(void) { TIM1->CR1 &= ~TIM_CR1_CEN; }

		//Stop PWM, change CCR1, Start PWM
		void TIM1_ChangePWM(uint32_t newCCRx)
		{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
			//TIM1_StopPWM();
			//TIM1->CNT = 0;
			//uint32_t newCCRX = dutyCycle * TIM1->ARR;
			TIM1->CCR1 = newCCRx;
 80009bc:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm+0x2c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = newCCRx;
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm+0x2c>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = newCCRx;
 80009c8:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm+0x2c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4 = newCCRx;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm+0x2c>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
			//TIM1_StartPWM();
		}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40010000 	.word	0x40010000

080009e4 <_ZN9ECE477_175Timer9TIM3_InitEv>:

		//TIM3 - Interrupt generator for shift register control
		void TIM3_Init(void)
		{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
			//Clock TIM3
			RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_ZN9ECE477_175Timer9TIM3_InitEv+0x4c>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <_ZN9ECE477_175Timer9TIM3_InitEv+0x4c>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
			//Setup TIM3
			//650 HZ update 200, 200
			//For seeing on scope
			TIM3->ARR 	= 500-1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <_ZN9ECE477_175Timer9TIM3_InitEv+0x50>)
 80009f6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC 	= 500-1;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <_ZN9ECE477_175Timer9TIM3_InitEv+0x50>)
 80009fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->DIER	|= TIM_DIER_UIE;
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <_ZN9ECE477_175Timer9TIM3_InitEv+0x50>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <_ZN9ECE477_175Timer9TIM3_InitEv+0x50>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	60d3      	str	r3, [r2, #12]
			TIM3->SR	= 0;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <_ZN9ECE477_175Timer9TIM3_InitEv+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//Uncomment to enable IRQ
			NVIC->ISER[0] |= _BS(TIM3_IRQn);
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_ZN9ECE477_175Timer9TIM3_InitEv+0x54>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <_ZN9ECE477_175Timer9TIM3_InitEv+0x54>)
 8000a1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a20:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a22:	b662      	cpsie	i
			__enable_irq();
			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40000400 	.word	0x40000400
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <_ZN9ECE477_175Timer10TIM3_StartEv>:
		//Start + Stop routines
		void TIM3_Start(void){ TIM3->CR1 |= TIM_CR1_CEN; }
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <_ZN9ECE477_175Timer10TIM3_StartEv+0x1c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <_ZN9ECE477_175Timer10TIM3_StartEv+0x1c>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40000400 	.word	0x40000400

08000a5c <receive>:


extern "C"
{
	void receive(uint8_t *buffer, uint32_t *pCounter)
	{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
		// Check RXNE event
		if (USART1->SR & USART_SR_RXNE)
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <receive+0x54>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0320 	and.w	r3, r3, #32
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d013      	beq.n	8000aa4 <receive+0x48>
		{
			buffer[*pCounter] = USART1->DR; // Reading DR clears RXNE flag
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <receive+0x54>)
 8000a7e:	6859      	ldr	r1, [r3, #4]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	b2ca      	uxtb	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]
			(*pCounter)++; // Dereference and update memory value
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	601a      	str	r2, [r3, #0]

			if ((*pCounter) >= BufferSize) // Check buffer overflow
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b1f      	cmp	r3, #31
 8000a9c:	d902      	bls.n	8000aa4 <receive+0x48>
			{
				(*pCounter) = 0; // Circular buffer - reset to 0
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
			}
		}
	}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40011000 	.word	0x40011000

08000ab4 <USART1_IRQHandler>:

extern "C"
{
	//Note: Double check this function name - looks good
	void USART1_IRQHandler(void)
	{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
		//Magic Hack. Make the initial previous command something that we don't use. The XBEE will be sending an IDLE command to the
		//RC car on startup. This will trigger a movment state update and set the robot movement to IDLE
		static char previousCommand = 'Z';

		//Grab data from RX buffer
		receive(USART1_Buffer_Rx, &Rx1_Counter);
 8000aba:	4934      	ldr	r1, [pc, #208]	; (8000b8c <USART1_IRQHandler+0xd8>)
 8000abc:	4834      	ldr	r0, [pc, #208]	; (8000b90 <USART1_IRQHandler+0xdc>)
 8000abe:	f7ff ffcd 	bl	8000a5c <receive>

		//Archive the command
		char command = (char) USART1_Buffer_Rx[Rx1_Counter-1];
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <USART1_IRQHandler+0xd8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <USART1_IRQHandler+0xdc>)
 8000aca:	5cd3      	ldrb	r3, [r2, r3]
 8000acc:	71fb      	strb	r3, [r7, #7]

		//Only update if commands are different
		if(previousCommand != command && shiftRegisterStateMachine.ReadyToUpdateShiftRegister())
 8000ace:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <USART1_IRQHandler+0xe0>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d007      	beq.n	8000ae8 <USART1_IRQHandler+0x34>
 8000ad8:	482f      	ldr	r0, [pc, #188]	; (8000b98 <USART1_IRQHandler+0xe4>)
 8000ada:	f7ff fe07 	bl	80006ec <_ZNK9ECE477_1731ShiftRegisterUpdateStateMachine26ReadyToUpdateShiftRegisterEv>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <USART1_IRQHandler+0x34>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e000      	b.n	8000aea <USART1_IRQHandler+0x36>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d041      	beq.n	8000b72 <USART1_IRQHandler+0xbe>
		{
			//Parse 'command'
			if(command == 'B')
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b42      	cmp	r3, #66	; 0x42
 8000af2:	d104      	bne.n	8000afe <USART1_IRQHandler+0x4a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(FULL_FORWARD);
 8000af4:	2101      	movs	r1, #1
 8000af6:	4829      	ldr	r0, [pc, #164]	; (8000b9c <USART1_IRQHandler+0xe8>)
 8000af8:	f7ff fc5c 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000afc:	e036      	b.n	8000b6c <USART1_IRQHandler+0xb8>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			else if(command == 'A')
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b41      	cmp	r3, #65	; 0x41
 8000b02:	d104      	bne.n	8000b0e <USART1_IRQHandler+0x5a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 8000b04:	2100      	movs	r1, #0
 8000b06:	4825      	ldr	r0, [pc, #148]	; (8000b9c <USART1_IRQHandler+0xe8>)
 8000b08:	f7ff fc54 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000b0c:	e02e      	b.n	8000b6c <USART1_IRQHandler+0xb8>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			else if(command == 'C')
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b43      	cmp	r3, #67	; 0x43
 8000b12:	d104      	bne.n	8000b1e <USART1_IRQHandler+0x6a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(FULL_REVERSE);
 8000b14:	2102      	movs	r1, #2
 8000b16:	4821      	ldr	r0, [pc, #132]	; (8000b9c <USART1_IRQHandler+0xe8>)
 8000b18:	f7ff fc4c 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000b1c:	e026      	b.n	8000b6c <USART1_IRQHandler+0xb8>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			//Rotation commands
			else if(command == 'I')
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b49      	cmp	r3, #73	; 0x49
 8000b22:	d104      	bne.n	8000b2e <USART1_IRQHandler+0x7a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(TANK_ROTATE_LEFT);
 8000b24:	2103      	movs	r1, #3
 8000b26:	481d      	ldr	r0, [pc, #116]	; (8000b9c <USART1_IRQHandler+0xe8>)
 8000b28:	f7ff fc44 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000b2c:	e01e      	b.n	8000b6c <USART1_IRQHandler+0xb8>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			else if(command == 'E')
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b45      	cmp	r3, #69	; 0x45
 8000b32:	d104      	bne.n	8000b3e <USART1_IRQHandler+0x8a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(TANK_ROTATE_RIGHT);
 8000b34:	2104      	movs	r1, #4
 8000b36:	4819      	ldr	r0, [pc, #100]	; (8000b9c <USART1_IRQHandler+0xe8>)
 8000b38:	f7ff fc3c 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000b3c:	e016      	b.n	8000b6c <USART1_IRQHandler+0xb8>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			//Set Half Speed
			else if(command == 'Q')
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b51      	cmp	r3, #81	; 0x51
 8000b42:	d108      	bne.n	8000b56 <USART1_IRQHandler+0xa2>
			{
				Timer::TIM1_ChangePWM(1250);
 8000b44:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8000b48:	f7ff ff34 	bl	80009b4 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm>
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <USART1_IRQHandler+0xe8>)
 8000b50:	f7ff fc30 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000b54:	e00a      	b.n	8000b6c <USART1_IRQHandler+0xb8>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			//Set high speed
			else if(command == 'Y')
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b59      	cmp	r3, #89	; 0x59
 8000b5a:	d107      	bne.n	8000b6c <USART1_IRQHandler+0xb8>
			{
				Timer::TIM1_ChangePWM(2500);
 8000b5c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000b60:	f7ff ff28 	bl	80009b4 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm>
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 8000b64:	2100      	movs	r1, #0
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <USART1_IRQHandler+0xe8>)
 8000b68:	f7ff fc24 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			//Begin a transmission when ready
			shiftRegisterStateMachine.beginTransmit = true;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <USART1_IRQHandler+0xe4>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	711a      	strb	r2, [r3, #4]
		}
		//Update previousCommand only if we are ready to update the shift register
		if(shiftRegisterStateMachine.ReadyToUpdateShiftRegister()) previousCommand = command;
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <USART1_IRQHandler+0xe4>)
 8000b74:	f7ff fdba 	bl	80006ec <_ZNK9ECE477_1731ShiftRegisterUpdateStateMachine26ReadyToUpdateShiftRegisterEv>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <USART1_IRQHandler+0xd0>
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <USART1_IRQHandler+0xe0>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	7013      	strb	r3, [r2, #0]
	}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000044 	.word	0x20000044
 8000b90:	20000024 	.word	0x20000024
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000050 	.word	0x20000050
 8000b9c:	20000048 	.word	0x20000048

08000ba0 <_ZN9ECE477_175USART10USART_InitEv>:
	namespace USART
	{
		//USART1 GPIOs are PB6 and PB7 - PCLK2 = 16 MHz
		//Setup GPIO + Registers for the USART
		void USART_Init(void)
		{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
			// Disable USART
			USART1->CR1 &= ~USART_CR1_UE;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bae:	60d3      	str	r3, [r2, #12]

			// Set data length to 8 bits
			// 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
			USART1->CR2 &= ~USART_CR2_STOP;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bba:	6113      	str	r3, [r2, #16]

			// Set parity control as no parity
			// 0 = no parity
			// 1 = parity enabled (then, program PS bit to select Even or Odd parity)
			USART1->CR1 &= ~USART_CR1_PCE;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bc6:	60d3      	str	r3, [r2, #12]

			// Oversampling by 16
			// 0 = oversampling by 16, 1 = oversampling by 8
			USART1->CR1 &= ~USART_CR1_OVER8;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bd2:	60d3      	str	r3, [r2, #12]

			// Set Baud Rate to 115200 using APB frequency (16 MHz) - NEED TO UPDATE!
			USART1->BRR = 0x8B;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bd6:	228b      	movs	r2, #139	; 0x8b
 8000bd8:	609a      	str	r2, [r3, #8]

			//USART1 Registers
			USART1->CR1 |= USART_CR1_RXNEIE; //Generate interrupt no receiving data
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000be0:	f043 0320 	orr.w	r3, r3, #32
 8000be4:	60d3      	str	r3, [r2, #12]
			USART1->CR1 |= USART_CR1_RE; //Enable receiver
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	60d3      	str	r3, [r2, #12]
			USART1->CR1 |= USART_CR1_UE; //Enable USART1
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <_ZN9ECE477_175USART10USART_InitEv+0x68>)
 8000bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bfc:	60d3      	str	r3, [r2, #12]

			//Enable NVIC interrupt
			NVIC_EnableIRQ(USART1_IRQn);
 8000bfe:	2025      	movs	r0, #37	; 0x25
 8000c00:	f7ff fae2 	bl	80001c8 <__NVIC_EnableIRQ>
			//NVIC->ISER[]??

			// Verify USART is ready for reception
			// REACK: Receive enable acknowledge flag. Hardware sets or resets it.
			//while (!(USART1->SR & USART_SR_RXNE));
		}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40011000 	.word	0x40011000

08000c0c <main>:
RobotMovementController movementController;

ShiftRegisterUpdateStateMachine shiftRegisterStateMachine;

int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	// GPIO Initialization for USART1 - CHECK IF THIS STILL APPLIES TO STM32F4
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <main+0xc0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a2d      	ldr	r2, [pc, #180]	; (8000ccc <main+0xc0>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <main+0xc0>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a2a      	ldr	r2, [pc, #168]	; (8000ccc <main+0xc0>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44

	// 00 = Input, 01 = Output, 10 = Alternate Function, 11 = Analog
	GPIOB->MODER &= ~(0xF << (2*6)); // Clear mode bits for pin 6 and 7
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <main+0xc4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <main+0xc4>)
 8000c30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000c34:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0xA << (2*6); // Select Alternate Function mode
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <main+0xc4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a25      	ldr	r2, [pc, #148]	; (8000cd0 <main+0xc4>)
 8000c3c:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000c40:	6013      	str	r3, [r2, #0]

	// Alternate Function 7 = USART 1
	GPIOB->AFR[0] |= 0x77 << (4*6); // Set pin 6 and 7 to AF7 - CHECK THIS
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <main+0xc4>)
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <main+0xc4>)
 8000c48:	f043 43ee 	orr.w	r3, r3, #1996488704	; 0x77000000
 8000c4c:	6213      	str	r3, [r2, #32]

	// GPIO Speed: 00 = Low Speed, 01 = Medium Speed, 10 = Fast Speed, 11 = Reserved
	GPIOB->OSPEEDR |= 0xF << (2*6);
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <main+0xc4>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <main+0xc4>)
 8000c54:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c58:	6093      	str	r3, [r2, #8]

	// GPIO push-pull: 00 = No pull-up/down. 01 = Pull up, 10 = Pull down, 11 = Reserved
	GPIOB->PUPDR &= ~ (0xF << (2*6));
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <main+0xc4>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <main+0xc4>)
 8000c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000c64:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= 0x5 << (2*6); // Select pull-up
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <main+0xc4>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <main+0xc4>)
 8000c6c:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000c70:	60d3      	str	r3, [r2, #12]

	// GPIO Output Type: 0 = push-pull, 1 = open drain
	GPIOB->OTYPER &= ~(0x3<<6);
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <main+0xc4>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <main+0xc4>)
 8000c78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c7c:	6053      	str	r3, [r2, #4]

	// USART
	USART_Init();
 8000c7e:	f7ff ff8f 	bl	8000ba0 <_ZN9ECE477_175USART10USART_InitEv>
	//Initialize other GPIO for shift register and PWM
	GPIOA_ShiftRegisterPins_Init();
 8000c82:	f7ff fdf3 	bl	800086c <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv>
	TIM1_PWM_Init();
 8000c86:	f7ff fe31 	bl	80008ec <_ZN9ECE477_175Timer13TIM1_PWM_InitEv>
	TIM3_Init();
 8000c8a:	f7ff feab 	bl	80009e4 <_ZN9ECE477_175Timer9TIM3_InitEv>
	TIM3_Start();
 8000c8e:	f7ff fed5 	bl	8000a3c <_ZN9ECE477_175Timer10TIM3_StartEv>

	//Set latch pins to default state so we don't update them by accident during startup
	movementController.SetLatchPinsToDefaultState();
 8000c92:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <main+0xc8>)
 8000c94:	f7ff fb64 	bl	8000360 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv>

	//Wait before setting to IDLE to avoid any odd behavior with pins
	for(int i = 0;i < 20000;i++);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	dc03      	bgt.n	8000cae <main+0xa2>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	e7f6      	b.n	8000c9c <main+0x90>
	//Default mode on powerup is IDLE.
	movementController.SetCurrentMovementStateAndUpdateMotorDirection(FULL_FORWARD);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <main+0xc8>)
 8000cb2:	f7ff fb7f 	bl	80003b4 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
	if(shiftRegisterStateMachine.beginTransmit == false) shiftRegisterStateMachine.beginTransmit = true;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <main+0xcc>)
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	f083 0301 	eor.w	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <main+0xbe>
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <main+0xcc>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	711a      	strb	r2, [r3, #4]
	//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();

	while(true)
 8000cca:	e7fe      	b.n	8000cca <main+0xbe>
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	20000048 	.word	0x20000048
 8000cd8:	20000050 	.word	0x20000050

08000cdc <_Z41__static_initialization_and_destruction_0ii>:
	{
	}

}
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10a      	bne.n	8000d02 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d105      	bne.n	8000d02 <_Z41__static_initialization_and_destruction_0ii+0x26>
RobotMovementController movementController;
 8000cf6:	480a      	ldr	r0, [pc, #40]	; (8000d20 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000cf8:	f7ff fa86 	bl	8000208 <_ZN9ECE477_1723RobotMovementControllerC1Ev>
ShiftRegisterUpdateStateMachine shiftRegisterStateMachine;
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000cfe:	f7ff fce1 	bl	80006c4 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachineC1Ev>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d107      	bne.n	8000d18 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d102      	bne.n	8000d18 <_Z41__static_initialization_and_destruction_0ii+0x3c>
RobotMovementController movementController;
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000d14:	f7ff fa95 	bl	8000242 <_ZN9ECE477_1723RobotMovementControllerD1Ev>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000048 	.word	0x20000048
 8000d24:	20000050 	.word	0x20000050

08000d28 <_GLOBAL__sub_I_TIM3_IRQHandler>:
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff ffd3 	bl	8000cdc <_Z41__static_initialization_and_destruction_0ii>
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_GLOBAL__sub_D_TIM3_IRQHandler>:
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ffcb 	bl	8000cdc <_Z41__static_initialization_and_destruction_0ii>
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <SystemInit+0x28>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <SystemInit+0x28>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SystemInit+0x28>)
 8000d5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d62:	609a      	str	r2, [r3, #8]
#endif
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d7a:	e003      	b.n	8000d84 <LoopCopyDataInit>

08000d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d82:	3104      	adds	r1, #4

08000d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d8c:	d3f6      	bcc.n	8000d7c <CopyDataInit>
  ldr  r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d90:	e002      	b.n	8000d98 <LoopFillZerobss>

08000d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d94:	f842 3b04 	str.w	r3, [r2], #4

08000d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d9c:	d3f9      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff ffd3 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f000 f811 	bl	8000dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff ff31 	bl	8000c0c <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000db0:	08000e38 	.word	0x08000e38
  ldr  r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000dbc:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000dc0:	20000058 	.word	0x20000058

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <__libc_init_array>:
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	4e0d      	ldr	r6, [pc, #52]	; (8000e00 <__libc_init_array+0x38>)
 8000dcc:	4c0d      	ldr	r4, [pc, #52]	; (8000e04 <__libc_init_array+0x3c>)
 8000dce:	1ba4      	subs	r4, r4, r6
 8000dd0:	10a4      	asrs	r4, r4, #2
 8000dd2:	2500      	movs	r5, #0
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	d109      	bne.n	8000dec <__libc_init_array+0x24>
 8000dd8:	4e0b      	ldr	r6, [pc, #44]	; (8000e08 <__libc_init_array+0x40>)
 8000dda:	4c0c      	ldr	r4, [pc, #48]	; (8000e0c <__libc_init_array+0x44>)
 8000ddc:	f000 f818 	bl	8000e10 <_init>
 8000de0:	1ba4      	subs	r4, r4, r6
 8000de2:	10a4      	asrs	r4, r4, #2
 8000de4:	2500      	movs	r5, #0
 8000de6:	42a5      	cmp	r5, r4
 8000de8:	d105      	bne.n	8000df6 <__libc_init_array+0x2e>
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000df0:	4798      	blx	r3
 8000df2:	3501      	adds	r5, #1
 8000df4:	e7ee      	b.n	8000dd4 <__libc_init_array+0xc>
 8000df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dfa:	4798      	blx	r3
 8000dfc:	3501      	adds	r5, #1
 8000dfe:	e7f2      	b.n	8000de6 <__libc_init_array+0x1e>
 8000e00:	08000e28 	.word	0x08000e28
 8000e04:	08000e28 	.word	0x08000e28
 8000e08:	08000e28 	.word	0x08000e28
 8000e0c:	08000e30 	.word	0x08000e30

08000e10 <_init>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	bf00      	nop
 8000e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e16:	bc08      	pop	{r3}
 8000e18:	469e      	mov	lr, r3
 8000e1a:	4770      	bx	lr

08000e1c <_fini>:
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	bf00      	nop
 8000e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e22:	bc08      	pop	{r3}
 8000e24:	469e      	mov	lr, r3
 8000e26:	4770      	bx	lr
