
ECE477_SeniorDesign_RC_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a58  08000a58  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a58  08000a58  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a58  08000a58  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a58  08000a58  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000a58  08000a58  00010a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08000a60  08000a60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000a68  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000004  08000a6c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08000a6c  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000185c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000054c  00000000  00000000  00021890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000130  00000000  00000000  00021de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00021f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fba5  00000000  00000000  00022018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001182  00000000  00000000  00041bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1e34  00000000  00000000  00042d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104b73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003fc  00000000  00000000  00104bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a40 	.word	0x08000a40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000a40 	.word	0x08000a40

080001c8 <_ZN9ECE477_1723RobotMovementControllerC1Ev>:

	//Struct for controlling motors
	struct RobotMovementController
	{
		//Constructor
		RobotMovementController(void)
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
		{
			//Set all to forward by default
			this->backright_motor_dir 	= NONE;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2202      	movs	r2, #2
 80001d4:	711a      	strb	r2, [r3, #4]
			this->backleft_motor_dir 	= NONE;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2202      	movs	r2, #2
 80001da:	70da      	strb	r2, [r3, #3]
			this->frontright_motor_dir 	= NONE;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2202      	movs	r2, #2
 80001e0:	709a      	strb	r2, [r3, #2]
			this->frontleft_motor_dir 	= NONE;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2202      	movs	r2, #2
 80001e6:	705a      	strb	r2, [r3, #1]
			//Set movement state to Idle
			this->current_movement_state = IDLE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2200      	movs	r2, #0
 80001ec:	715a      	strb	r2, [r3, #5]
			this->updatedLatchValueToTransmit = 0x00;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
		}
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4618      	mov	r0, r3
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr

08000202 <_ZN9ECE477_1723RobotMovementControllerD1Ev>:

		//Destructor (unused)
		~RobotMovementController(void){}
 8000202:	b480      	push	{r7}
 8000204:	b083      	sub	sp, #12
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4618      	mov	r0, r3
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>:
			this->ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
		}


		//Set current movement state
		void SetCurrentMovementStateAndUpdateMotorDirection(ROBOT_MOVEMENT_STATE newState)
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	70fb      	strb	r3, [r7, #3]
		{
			//Store the new state
			this->current_movement_state = newState;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	78fa      	ldrb	r2, [r7, #3]
 8000228:	715a      	strb	r2, [r3, #5]
			//Update motor directions
			switch(this->current_movement_state)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	795b      	ldrb	r3, [r3, #5]
 800022e:	2b06      	cmp	r3, #6
 8000230:	d86b      	bhi.n	800030a <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf2>
 8000232:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x20>)
 8000234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000238:	08000255 	.word	0x08000255
 800023c:	0800026f 	.word	0x0800026f
 8000240:	08000289 	.word	0x08000289
 8000244:	080002a3 	.word	0x080002a3
 8000248:	080002bd 	.word	0x080002bd
 800024c:	080002d7 	.word	0x080002d7
 8000250:	080002f1 	.word	0x080002f1
			{
				//IDLE: Robot is not moving
				case IDLE:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= NONE;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2202      	movs	r2, #2
 8000258:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= NONE;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2202      	movs	r2, #2
 800025e:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= NONE;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2202      	movs	r2, #2
 8000264:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= NONE;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2202      	movs	r2, #2
 800026a:	705a      	strb	r2, [r3, #1]
					break;
 800026c:	e04e      	b.n	800030c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case FULL_FORWARD:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2200      	movs	r2, #0
 8000272:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= FORWARD;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2200      	movs	r2, #0
 8000278:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= FORWARD;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= FORWARD;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	705a      	strb	r2, [r3, #1]
					break;
 8000286:	e041      	b.n	800030c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case FULL_REVERSE:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= REVERSE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2201      	movs	r2, #1
 800028c:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= REVERSE;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= REVERSE;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2201      	movs	r2, #1
 8000298:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= REVERSE;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2201      	movs	r2, #1
 800029e:	705a      	strb	r2, [r3, #1]
					break;
 80002a0:	e034      	b.n	800030c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case TANK_ROTATE_LEFT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2200      	movs	r2, #0
 80002a6:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= REVERSE;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= FORWARD;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2200      	movs	r2, #0
 80002b2:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= REVERSE;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2201      	movs	r2, #1
 80002b8:	705a      	strb	r2, [r3, #1]
					break;
 80002ba:	e027      	b.n	800030c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case TANK_ROTATE_RIGHT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= REVERSE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2201      	movs	r2, #1
 80002c0:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= FORWARD;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= REVERSE;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2201      	movs	r2, #1
 80002cc:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= FORWARD;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2200      	movs	r2, #0
 80002d2:	705a      	strb	r2, [r3, #1]
					break;
 80002d4:	e01a      	b.n	800030c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case SOFT_ROTATE_LEFT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= NONE;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2202      	movs	r2, #2
 80002e0:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= FORWARD;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= NONE;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2202      	movs	r2, #2
 80002ec:	705a      	strb	r2, [r3, #1]
					break;
 80002ee:	e00d      	b.n	800030c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>


				case SOFT_ROTATE_RIGHT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= NONE;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2202      	movs	r2, #2
 80002f4:	711a      	strb	r2, [r3, #4]
					this->backleft_motor_dir 	= FORWARD;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	70da      	strb	r2, [r3, #3]
					this->frontright_motor_dir 	= NONE;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2202      	movs	r2, #2
 8000300:	709a      	strb	r2, [r3, #2]
					this->frontleft_motor_dir 	= FORWARD;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2200      	movs	r2, #0
 8000306:	705a      	strb	r2, [r3, #1]
					break;
 8000308:	e000      	b.n	800030c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				//Default case. Shouldn't be a problem.
				default: break;
 800030a:	bf00      	nop
			}
			//Update the latchValueToTransmit based on our updated movement control state
			UpdateMotorEnableDirectionInLatchValueToTransmit(FRONT_LEFT, this->frontleft_motor_dir);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	785b      	ldrb	r3, [r3, #1]
 8000310:	461a      	mov	r2, r3
 8000312:	2100      	movs	r1, #0
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 f819 	bl	800034c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(FRONT_RIGHT, this->frontright_motor_dir);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	789b      	ldrb	r3, [r3, #2]
 800031e:	461a      	mov	r2, r3
 8000320:	2101      	movs	r1, #1
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f000 f812 	bl	800034c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(BACK_LEFT, this->backleft_motor_dir);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	78db      	ldrb	r3, [r3, #3]
 800032c:	461a      	mov	r2, r3
 800032e:	2103      	movs	r1, #3
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f000 f80b 	bl	800034c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(BACK_RIGHT, this->backright_motor_dir);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	791b      	ldrb	r3, [r3, #4]
 800033a:	461a      	mov	r2, r3
 800033c:	2102      	movs	r1, #2
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f000 f804 	bl	800034c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
		}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>:
		uint8_t updatedLatchValueToTransmit;

		//Private member variables and functions
		private:

		void UpdateMotorEnableDirectionInLatchValueToTransmit(MOTOR_ID motor, MOTOR_DIRECTION direction)
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
 8000358:	4613      	mov	r3, r2
 800035a:	70bb      	strb	r3, [r7, #2]
		{
			//CAUTION! - to move forward the motors on the left and right of the chassis need 'reversed' polarity / direction to move forward or back. Think about what happens when you take a motor on the left and flip it 180. If you set all motors to same direction the robot will rotate around
			//its center
			if(motor == FRONT_RIGHT)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d134      	bne.n	80003cc <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
			{
				//Look at the direction
				if(direction == NONE)
 8000362:	78bb      	ldrb	r3, [r7, #2]
 8000364:	2b02      	cmp	r3, #2
 8000366:	d10e      	bne.n	8000386 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x3a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_A;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	f023 0320 	bic.w	r3, r3, #32
 8000370:	b2da      	uxtb	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_B;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800037e:	b2da      	uxtb	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	701a      	strb	r2, [r3, #0]
 8000384:	e022      	b.n	80003cc <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				}
				else if(direction == FORWARD)
 8000386:	78bb      	ldrb	r3, [r7, #2]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d10e      	bne.n	80003aa <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x5e>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_FR_A;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	b2da      	uxtb	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_B;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	701a      	strb	r2, [r3, #0]
 80003a8:	e010      	b.n	80003cc <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				}
				else if(direction == REVERSE)
 80003aa:	78bb      	ldrb	r3, [r7, #2]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d10d      	bne.n	80003cc <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_A;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	f023 0320 	bic.w	r3, r3, #32
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit |=  MOTOR_FR_B;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	701a      	strb	r2, [r3, #0]
				}
			}

			if(motor == BACK_RIGHT)
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d134      	bne.n	800043c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
			{
				//Look at the direction
				if(direction == NONE)
 80003d2:	78bb      	ldrb	r3, [r7, #2]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d10e      	bne.n	80003f6 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xaa>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_A;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	f023 0301 	bic.w	r3, r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_B;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	701a      	strb	r2, [r3, #0]
 80003f4:	e022      	b.n	800043c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				}
				else if(direction == FORWARD)
 80003f6:	78bb      	ldrb	r3, [r7, #2]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d10e      	bne.n	800041a <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xce>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_BR_A;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	b2da      	uxtb	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_B;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000412:	b2da      	uxtb	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e010      	b.n	800043c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				}
				else if(direction == REVERSE)
 800041a:	78bb      	ldrb	r3, [r7, #2]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d10d      	bne.n	800043c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_A;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	f023 0301 	bic.w	r3, r3, #1
 8000428:	b2da      	uxtb	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit |=  MOTOR_BR_B;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000436:	b2da      	uxtb	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	701a      	strb	r2, [r3, #0]
				}
			}
//DIFFERENT SIDES OF CHASSIS -------------------------------------------------------------------------------
			if(motor == FRONT_LEFT)
 800043c:	78fb      	ldrb	r3, [r7, #3]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d134      	bne.n	80004ac <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
			{
				//Look at the direction
				if(direction == NONE)
 8000442:	78bb      	ldrb	r3, [r7, #2]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d10e      	bne.n	8000466 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x11a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_A;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	f023 0304 	bic.w	r3, r3, #4
 8000450:	b2da      	uxtb	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_B;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	f023 0308 	bic.w	r3, r3, #8
 800045e:	b2da      	uxtb	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	701a      	strb	r2, [r3, #0]
 8000464:	e022      	b.n	80004ac <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				}
				else if(direction == FORWARD)
 8000466:	78bb      	ldrb	r3, [r7, #2]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d10e      	bne.n	800048a <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x13e>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_A;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	f023 0304 	bic.w	r3, r3, #4
 8000474:	b2da      	uxtb	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit |=  MOTOR_FL_B;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	b2da      	uxtb	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	e010      	b.n	80004ac <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				}
				else if(direction == REVERSE)
 800048a:	78bb      	ldrb	r3, [r7, #2]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d10d      	bne.n	80004ac <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_FL_A;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	b2da      	uxtb	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_B;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	f023 0308 	bic.w	r3, r3, #8
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	701a      	strb	r2, [r3, #0]
				}
			}
			if(motor == BACK_LEFT)
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d134      	bne.n	800051c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
			{
				//Look at the direction
				if(direction == NONE)
 80004b2:	78bb      	ldrb	r3, [r7, #2]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d10e      	bne.n	80004d6 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x18a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_A;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	f023 0302 	bic.w	r3, r3, #2
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	f023 0310 	bic.w	r3, r3, #16
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	701a      	strb	r2, [r3, #0]
				{
					this->updatedLatchValueToTransmit |=  MOTOR_BL_A;
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
				}
			}
		}
 80004d4:	e022      	b.n	800051c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
				else if(direction == FORWARD)
 80004d6:	78bb      	ldrb	r3, [r7, #2]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d10e      	bne.n	80004fa <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1ae>
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_A;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	f023 0302 	bic.w	r3, r3, #2
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit |=  MOTOR_BL_B;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	f043 0310 	orr.w	r3, r3, #16
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	701a      	strb	r2, [r3, #0]
		}
 80004f8:	e010      	b.n	800051c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
				else if(direction == REVERSE)
 80004fa:	78bb      	ldrb	r3, [r7, #2]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d10d      	bne.n	800051c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
					this->updatedLatchValueToTransmit |=  MOTOR_BL_A;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	b2da      	uxtb	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	701a      	strb	r2, [r3, #0]
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	f023 0310 	bic.w	r3, r3, #16
 8000516:	b2da      	uxtb	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	701a      	strb	r2, [r3, #0]
		}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachineC1Ev>:
	enum SHIFT_REG_STATES{STANDBY, LATCH, CLK_RST, TRANSFER_BIT, CLK_SET, UNLATCH};

	struct ShiftRegisterUpdateStateMachine
	{
		//Constructor
		ShiftRegisterUpdateStateMachine(void)
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
		{
			this->currentBitToSend 	= 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
			this->beginTransmit 	= false;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	711a      	strb	r2, [r3, #4]
			this->current_state 		= STANDBY;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	715a      	strb	r2, [r3, #5]
		}
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <_ZNK9ECE477_1731ShiftRegisterUpdateStateMachine26ReadyToUpdateShiftRegisterEv>:
		bool IsCurrentlyUpdatingShiftRegister(void) const
		{
			return this->current_state != STANDBY;
		}

		bool ReadyToUpdateShiftRegister(void) const
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
		{
			return this->current_state == STANDBY;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b00      	cmp	r3, #0
 800055e:	bf0c      	ite	eq
 8000560:	2301      	moveq	r3, #1
 8000562:	2300      	movne	r3, #0
 8000564:	b2db      	uxtb	r3, r3
		}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh>:

		//Update FSM
		void UpdateState(uint8_t latchValueToTransmit)
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
		{
			//Observe current state
			switch(this->current_state)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	795b      	ldrb	r3, [r3, #5]
 8000584:	2b05      	cmp	r3, #5
 8000586:	f200 8083 	bhi.w	8000690 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11c>
 800058a:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x1c>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005a9 	.word	0x080005a9
 8000594:	080005c7 	.word	0x080005c7
 8000598:	080005db 	.word	0x080005db
 800059c:	080005ef 	.word	0x080005ef
 80005a0:	08000647 	.word	0x08000647
 80005a4:	08000671 	.word	0x08000671
			{
				//Standby state
				case STANDBY:
				{
					//Start transmitting? Check it
					if(this->beginTransmit == true)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x4a>
					{
						this->current_state = LATCH;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	715a      	strb	r2, [r3, #5]
						//Reset beginTransmit
						this->beginTransmit = false;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	711a      	strb	r2, [r3, #4]
					}
					else
					{
						this->current_state = STANDBY;
					}
				}break;
 80005bc:	e069      	b.n	8000692 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>
						this->current_state = STANDBY;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	715a      	strb	r2, [r3, #5]
				}break;
 80005c4:	e065      	b.n	8000692 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case LATCH:
				{
					//Set LATCH low
					SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_LATCH;
 80005c6:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80005cc:	f023 0302 	bic.w	r3, r3, #2
 80005d0:	6153      	str	r3, [r2, #20]
					//Go to CLK_RST
					this->current_state = CLK_RST;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2202      	movs	r2, #2
 80005d6:	715a      	strb	r2, [r3, #5]
				}break;
 80005d8:	e05b      	b.n	8000692 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case CLK_RST:
				{
					//Set CLK low
					SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_CLK;
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a30      	ldr	r2, [pc, #192]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 80005e0:	f023 0308 	bic.w	r3, r3, #8
 80005e4:	6153      	str	r3, [r2, #20]
					//Transfer a bit next!
					this->current_state = TRANSFER_BIT;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2203      	movs	r2, #3
 80005ea:	715a      	strb	r2, [r3, #5]
				}break;
 80005ec:	e051      	b.n	8000692 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case TRANSFER_BIT:
				{
					//Get bit to transfer
					uint8_t ithBitValueOfLatchValueToTransmit = latchValueToTransmit & _BS((7-(this->currentBitToSend)));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f1c3 0307 	rsb	r3, r3, #7
 80005f6:	2201      	movs	r2, #1
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	b25a      	sxtb	r2, r3
 80005fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000602:	4013      	ands	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	73fb      	strb	r3, [r7, #15]
					//Set HI or LOW depending on the bit value at index 'i'
					if (ithBitValueOfLatchValueToTransmit)
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0xa8>
					{
						SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_DATA;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	e005      	b.n	8000628 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0xb4>
					}
					else
					{
						SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_DATA;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	6153      	str	r3, [r2, #20]
					}

					//LED go brrrt
					GPIOD->ODR ^= _BS(13); //Turn on orange LED
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x130>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x130>)
 800062e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000632:	6153      	str	r3, [r2, #20]

					//Increment bit value
					this->currentBitToSend++;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	601a      	str	r2, [r3, #0]

					//Go to CLK_SET
					this->current_state = CLK_SET;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2204      	movs	r2, #4
 8000642:	715a      	strb	r2, [r3, #5]
				}break;
 8000644:	e025      	b.n	8000692 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case CLK_SET:
				{
					//Set CLK high.
					SHIFT_REGISTER_GPIO->ODR |= SHIFT_REGISTER_CLK;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	6153      	str	r3, [r2, #20]
					//check currentBitToSend
					//This should be 8 because the currentBitToSend will be 7 (last bit) before incrementing in TRANSFER_BIT. Therefore it will be 8 when arriving to this state.
					if(currentBitToSend >= 8)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b07      	cmp	r3, #7
 8000658:	dd06      	ble.n	8000668 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0xf4>
					{
						//Reset currentBitToSend, and go to UNLATCH
						currentBitToSend = 0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
						this->current_state = UNLATCH;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2205      	movs	r2, #5
 8000664:	715a      	strb	r2, [r3, #5]
					//We have more bits to send. Loop back to CLK_RST
					else
					{
						this->current_state = CLK_RST;
					}
				}break;
 8000666:	e014      	b.n	8000692 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>
						this->current_state = CLK_RST;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2202      	movs	r2, #2
 800066c:	715a      	strb	r2, [r3, #5]
				}break;
 800066e:	e010      	b.n	8000692 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				case UNLATCH:
				{
					//LED go brrrt
					GPIOD->ODR &= ~_BS(13); //Turn on orange LED
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x130>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x130>)
 8000676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800067a:	6153      	str	r3, [r2, #20]

					//Set LATCH high
					SHIFT_REGISTER_GPIO->ODR |= SHIFT_REGISTER_LATCH;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x12c>)
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	6153      	str	r3, [r2, #20]
					//Go to standby next
					this->current_state = STANDBY;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	715a      	strb	r2, [r3, #5]
				}break;
 800068e:	e000      	b.n	8000692 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh+0x11e>

				default: break;
 8000690:	bf00      	nop
			}
		}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <TIM3_IRQHandler>:
extern ECE477_17::ShiftRegisterUpdateStateMachine shiftRegisterStateMachine;

extern "C"
{
	void TIM3_IRQHandler(void)
	{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

		//Update state machine as necessary
		shiftRegisterStateMachine.UpdateState(movementController.updatedLatchValueToTransmit);
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <TIM3_IRQHandler+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <TIM3_IRQHandler+0x20>)
 80006b4:	f7ff ff5e 	bl	8000574 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachine11UpdateStateEh>

		//Zero out SR so we indicate we have finished the interrupt routine (else get stuck here.... forever!)
		TIM3->SR = 0;
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <TIM3_IRQHandler+0x24>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
	}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000044 	.word	0x20000044
 80006c8:	2000004c 	.word	0x2000004c
 80006cc:	40000400 	.word	0x40000400

080006d0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv>:
			GPIOD->OSPEEDR  |= _BS(28) | _BS(26);
		}

		//Initialize TIM1 and its 4 Channels
		void TIM1_PWM_Init(void)
		{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
			//Enable Clock to TIM1, GPIOE (PWM GPIO pins)
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xac>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a28      	ldr	r2, [pc, #160]	; (800077c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xac>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
			RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80006e0:	4b26      	ldr	r3, [pc, #152]	; (800077c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xac>)
 80006e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e4:	4a25      	ldr	r2, [pc, #148]	; (800077c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xac>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6453      	str	r3, [r2, #68]	; 0x44

			//Select TIM1 Channels for PE9 and NOT 11,13,14
			GPIOE->AFR[1] 	= ( _BS(4) | _BS(12) | _BS(20) | _BS(24) ); //Choose AF's
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb0>)
 80006ee:	4a25      	ldr	r2, [pc, #148]	; (8000784 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOE->MODER  	= ( _BS(19) | _BS(23) | _BS(27) | _BS(29) ); //Set to AF mode
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb0>)
 80006f4:	4a24      	ldr	r2, [pc, #144]	; (8000788 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 80006f6:	601a      	str	r2, [r3, #0]
			GPIOE->OSPEEDR 	= ( _BS(19) | _BS(23) | _BS(27) | _BS(29) ); //Set to high speed
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb0>)
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 80006fc:	609a      	str	r2, [r3, #8]
			GPIOE->PUPDR	= 0;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb0>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]

			//Setup TIM1
			//Recall: System runs at 25MHz, and we want 5 kHz frequency
			TIM1->ARR = 20-1;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000706:	2213      	movs	r2, #19
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC = 250-1;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800070c:	22f9      	movs	r2, #249	; 0xf9
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
			//TIM1->DIER |= _BS(0); //Enable UIE
			//TIM1->EGR  |= _BS(0); //Generate update
			TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; //Set PWM Mode
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a1d      	ldr	r2, [pc, #116]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000716:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800071a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800071e:	6193      	str	r3, [r2, #24]

			TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000726:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800072a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800072e:	61d3      	str	r3, [r2, #28]
			//To move forward, set CCR2 to 0 and CCR1 to < 20.
			// To move in reverse, set CCR1 to 0 and CCR2 to < 20.
			// DO NOT SET BOTH CCRs to non-zero values.
			// NEED TO SELECT WHETHER Channels 1 and 2 correspond to left or right of vehicle
			// Manually toggling these right now, need to make them automatically switch
			TIM1->CCR1	= 19;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000732:	2213      	movs	r2, #19
 8000734:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 	= 0;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000738:	2200      	movs	r2, #0
 800073a:	639a      	str	r2, [r3, #56]	; 0x38
			//To move forward, set CCR4 to 0 and CCR3 to < 20.
			// To move in reverse, set CCR3 to 0 and CCR4 to < 20.
			// DO NOT SET BOTH CCRs to non-zero values.
			// Manually toggling these right now, need to make them automatically switch
			// NEED TO SELECT WHETHER Channels 3 and 4 correspond to left or right of vehicle
			TIM1->CCR3	= 19;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800073e:	2213      	movs	r2, #19
 8000740:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4	= 0;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000744:	2200      	movs	r2, #0
 8000746:	641a      	str	r2, [r3, #64]	; 0x40

			//Duty Cycle is CCRX / ARR
			TIM1->CCER  |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	4a0f      	ldr	r2, [pc, #60]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800074e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8000752:	f043 0311 	orr.w	r3, r3, #17
 8000756:	6213      	str	r3, [r2, #32]
			TIM1->BDTR  |= TIM_BDTR_MOE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800075a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800075e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000762:	6453      	str	r3, [r2, #68]	; 0x44

			TIM1->CR1  |= TIM_CR1_CEN; //Count enable
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a08      	ldr	r2, [pc, #32]	; (800078c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6013      	str	r3, [r2, #0]
		}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	01101010 	.word	0x01101010
 8000788:	28880000 	.word	0x28880000
 800078c:	40010000 	.word	0x40010000

08000790 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm>:
		//Stop PWM.
		void TIM1_StopPWM(void) { TIM1->CR1 &= ~TIM_CR1_CEN; }

		//Stop PWM, change CCR1, Start PWM
		void TIM1_ChangePWM(uint32_t newCCRx)
		{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
			TIM1->CCR1 = newCCRx;
 8000798:	4a08      	ldr	r2, [pc, #32]	; (80007bc <_ZN9ECE477_175Timer14TIM1_ChangePWMEm+0x2c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = newCCRx;
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <_ZN9ECE477_175Timer14TIM1_ChangePWMEm+0x2c>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = newCCRx;
 80007a4:	4a05      	ldr	r2, [pc, #20]	; (80007bc <_ZN9ECE477_175Timer14TIM1_ChangePWMEm+0x2c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4 = newCCRx;
 80007aa:	4a04      	ldr	r2, [pc, #16]	; (80007bc <_ZN9ECE477_175Timer14TIM1_ChangePWMEm+0x2c>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
		}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40010000 	.word	0x40010000

080007c0 <receive>:


extern "C"
{
	void receive(uint8_t *buffer, uint32_t *pCounter)
	{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
		// Check RXNE event
		if (USART1->SR & USART_SR_RXNE)
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <receive+0x54>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 0320 	and.w	r3, r3, #32
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d013      	beq.n	8000808 <receive+0x48>
		{
			buffer[*pCounter] = USART1->DR; // Reading DR clears RXNE flag
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <receive+0x54>)
 80007e2:	6859      	ldr	r1, [r3, #4]
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	b2ca      	uxtb	r2, r1
 80007ee:	701a      	strb	r2, [r3, #0]
			(*pCounter)++; // Dereference and update memory value
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	601a      	str	r2, [r3, #0]

			if ((*pCounter) >= BufferSize) // Check buffer overflow
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b1f      	cmp	r3, #31
 8000800:	d902      	bls.n	8000808 <receive+0x48>
			{
				(*pCounter) = 0; // Circular buffer - reset to 0
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
			}
		}
	}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	40011000 	.word	0x40011000

08000818 <USART1_IRQHandler>:

extern "C"
{
	//Note: Double check this function name - looks good
	void USART1_IRQHandler(void)
	{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
		//Magic Hack. Make the initial previous command something that we don't use. The XBEE will be sending an IDLE command to the
		//RC car on startup. This will trigger a movment state update and set the robot movement to IDLE
		static char previousCommand = 'Z';

		//Grab data from RX buffer
		receive(USART1_Buffer_Rx, &Rx1_Counter);
 800081e:	4933      	ldr	r1, [pc, #204]	; (80008ec <USART1_IRQHandler+0xd4>)
 8000820:	4833      	ldr	r0, [pc, #204]	; (80008f0 <USART1_IRQHandler+0xd8>)
 8000822:	f7ff ffcd 	bl	80007c0 <receive>

		//Archive the command
		char command = (char) USART1_Buffer_Rx[Rx1_Counter-1];
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <USART1_IRQHandler+0xd4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <USART1_IRQHandler+0xd8>)
 800082e:	5cd3      	ldrb	r3, [r2, r3]
 8000830:	71fb      	strb	r3, [r7, #7]

		//Only update if commands are different
		if(previousCommand != command && shiftRegisterStateMachine.ReadyToUpdateShiftRegister())
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <USART1_IRQHandler+0xdc>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	79fa      	ldrb	r2, [r7, #7]
 8000838:	429a      	cmp	r2, r3
 800083a:	d007      	beq.n	800084c <USART1_IRQHandler+0x34>
 800083c:	482e      	ldr	r0, [pc, #184]	; (80008f8 <USART1_IRQHandler+0xe0>)
 800083e:	f7ff fe87 	bl	8000550 <_ZNK9ECE477_1731ShiftRegisterUpdateStateMachine26ReadyToUpdateShiftRegisterEv>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <USART1_IRQHandler+0x34>
 8000848:	2301      	movs	r3, #1
 800084a:	e000      	b.n	800084e <USART1_IRQHandler+0x36>
 800084c:	2300      	movs	r3, #0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d03f      	beq.n	80008d2 <USART1_IRQHandler+0xba>
		{
			//Parse 'command'
			if(command == 'B')
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b42      	cmp	r3, #66	; 0x42
 8000856:	d104      	bne.n	8000862 <USART1_IRQHandler+0x4a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(FULL_FORWARD);
 8000858:	2101      	movs	r1, #1
 800085a:	4828      	ldr	r0, [pc, #160]	; (80008fc <USART1_IRQHandler+0xe4>)
 800085c:	f7ff fcdc 	bl	8000218 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000860:	e034      	b.n	80008cc <USART1_IRQHandler+0xb4>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			else if(command == 'A')
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b41      	cmp	r3, #65	; 0x41
 8000866:	d104      	bne.n	8000872 <USART1_IRQHandler+0x5a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 8000868:	2100      	movs	r1, #0
 800086a:	4824      	ldr	r0, [pc, #144]	; (80008fc <USART1_IRQHandler+0xe4>)
 800086c:	f7ff fcd4 	bl	8000218 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000870:	e02c      	b.n	80008cc <USART1_IRQHandler+0xb4>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			else if(command == 'C')
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b43      	cmp	r3, #67	; 0x43
 8000876:	d104      	bne.n	8000882 <USART1_IRQHandler+0x6a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(FULL_REVERSE);
 8000878:	2102      	movs	r1, #2
 800087a:	4820      	ldr	r0, [pc, #128]	; (80008fc <USART1_IRQHandler+0xe4>)
 800087c:	f7ff fccc 	bl	8000218 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000880:	e024      	b.n	80008cc <USART1_IRQHandler+0xb4>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			//Rotation commands
			else if(command == 'I')
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b49      	cmp	r3, #73	; 0x49
 8000886:	d104      	bne.n	8000892 <USART1_IRQHandler+0x7a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(TANK_ROTATE_LEFT);
 8000888:	2103      	movs	r1, #3
 800088a:	481c      	ldr	r0, [pc, #112]	; (80008fc <USART1_IRQHandler+0xe4>)
 800088c:	f7ff fcc4 	bl	8000218 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 8000890:	e01c      	b.n	80008cc <USART1_IRQHandler+0xb4>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			else if(command == 'E')
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b45      	cmp	r3, #69	; 0x45
 8000896:	d104      	bne.n	80008a2 <USART1_IRQHandler+0x8a>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(TANK_ROTATE_RIGHT);
 8000898:	2104      	movs	r1, #4
 800089a:	4818      	ldr	r0, [pc, #96]	; (80008fc <USART1_IRQHandler+0xe4>)
 800089c:	f7ff fcbc 	bl	8000218 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 80008a0:	e014      	b.n	80008cc <USART1_IRQHandler+0xb4>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			//Set Half Speed
			else if(command == 'Q')
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b51      	cmp	r3, #81	; 0x51
 80008a6:	d107      	bne.n	80008b8 <USART1_IRQHandler+0xa0>
			{
				Timer::TIM1_ChangePWM(40);
 80008a8:	2028      	movs	r0, #40	; 0x28
 80008aa:	f7ff ff71 	bl	8000790 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm>
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 80008ae:	2100      	movs	r1, #0
 80008b0:	4812      	ldr	r0, [pc, #72]	; (80008fc <USART1_IRQHandler+0xe4>)
 80008b2:	f7ff fcb1 	bl	8000218 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 80008b6:	e009      	b.n	80008cc <USART1_IRQHandler+0xb4>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			//Set high speed
			else if(command == 'Y')
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b59      	cmp	r3, #89	; 0x59
 80008bc:	d106      	bne.n	80008cc <USART1_IRQHandler+0xb4>
			{
				Timer::TIM1_ChangePWM(80);
 80008be:	2050      	movs	r0, #80	; 0x50
 80008c0:	f7ff ff66 	bl	8000790 <_ZN9ECE477_175Timer14TIM1_ChangePWMEm>
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 80008c4:	2100      	movs	r1, #0
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <USART1_IRQHandler+0xe4>)
 80008c8:	f7ff fca6 	bl	8000218 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
				//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
			}
			//Begin a transmission when ready
			shiftRegisterStateMachine.beginTransmit = true;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <USART1_IRQHandler+0xe0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	711a      	strb	r2, [r3, #4]
		}
		//Update previousCommand only if we are ready to update the shift register
		if(shiftRegisterStateMachine.ReadyToUpdateShiftRegister()) previousCommand = command;
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <USART1_IRQHandler+0xe0>)
 80008d4:	f7ff fe3c 	bl	8000550 <_ZNK9ECE477_1731ShiftRegisterUpdateStateMachine26ReadyToUpdateShiftRegisterEv>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <USART1_IRQHandler+0xcc>
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <USART1_IRQHandler+0xdc>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	7013      	strb	r3, [r2, #0]
	}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000040 	.word	0x20000040
 80008f0:	20000020 	.word	0x20000020
 80008f4:	20000000 	.word	0x20000000
 80008f8:	2000004c 	.word	0x2000004c
 80008fc:	20000044 	.word	0x20000044

08000900 <main>:
RobotMovementController movementController;

ShiftRegisterUpdateStateMachine shiftRegisterStateMachine;

int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	//USART_Init();

	//Initialize other GPIO for shift register and PWM
	//GPIOA_ShiftRegisterPins_Init();

	TIM1_PWM_Init();
 8000904:	f7ff fee4 	bl	80006d0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv>
	//Proper way to start transmitting
	if(shiftRegisterStateMachine.ReadyToUpdateShiftRegister()) shiftRegisterStateMachine.beginTransmit = true;
	//Wait to finish
	while(shiftRegisterStateMachine.IsCurrentlyUpdatingShiftRegister());
	*/
	while(true)
 8000908:	e7fe      	b.n	8000908 <main+0x8>
	...

0800090c <_Z41__static_initialization_and_destruction_0ii>:
	{
	}

}
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10a      	bne.n	8000932 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000922:	4293      	cmp	r3, r2
 8000924:	d105      	bne.n	8000932 <_Z41__static_initialization_and_destruction_0ii+0x26>
RobotMovementController movementController;
 8000926:	480a      	ldr	r0, [pc, #40]	; (8000950 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000928:	f7ff fc4e 	bl	80001c8 <_ZN9ECE477_1723RobotMovementControllerC1Ev>
ShiftRegisterUpdateStateMachine shiftRegisterStateMachine;
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800092e:	f7ff fdfb 	bl	8000528 <_ZN9ECE477_1731ShiftRegisterUpdateStateMachineC1Ev>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d107      	bne.n	8000948 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093e:	4293      	cmp	r3, r2
 8000940:	d102      	bne.n	8000948 <_Z41__static_initialization_and_destruction_0ii+0x3c>
RobotMovementController movementController;
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000944:	f7ff fc5d 	bl	8000202 <_ZN9ECE477_1723RobotMovementControllerD1Ev>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000044 	.word	0x20000044
 8000954:	2000004c 	.word	0x2000004c

08000958 <_GLOBAL__sub_I_TIM3_IRQHandler>:
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
 800095c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff ffd3 	bl	800090c <_Z41__static_initialization_and_destruction_0ii>
 8000966:	bd80      	pop	{r7, pc}

08000968 <_GLOBAL__sub_D_TIM3_IRQHandler>:
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
 800096c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff ffcb 	bl	800090c <_Z41__static_initialization_and_destruction_0ii>
 8000976:	bd80      	pop	{r7, pc}

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <SystemInit+0x28>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <SystemInit+0x28>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SystemInit+0x28>)
 800098e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000992:	609a      	str	r2, [r3, #8]
#endif
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009dc <LoopFillZerobss+0x14>
 80009a8:	2100      	movs	r1, #0
 80009aa:	e003      	b.n	80009b4 <LoopCopyDataInit>

080009ac <CopyDataInit>:
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <LoopFillZerobss+0x18>)
 80009ae:	585b      	ldr	r3, [r3, r1]
 80009b0:	5043      	str	r3, [r0, r1]
 80009b2:	3104      	adds	r1, #4

080009b4 <LoopCopyDataInit>:
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <LoopFillZerobss+0x1c>)
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <LoopFillZerobss+0x20>)
 80009b8:	1842      	adds	r2, r0, r1
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d3f6      	bcc.n	80009ac <CopyDataInit>
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <LoopFillZerobss+0x24>)
 80009c0:	e002      	b.n	80009c8 <LoopFillZerobss>

080009c2 <FillZerobss>:
 80009c2:	2300      	movs	r3, #0
 80009c4:	f842 3b04 	str.w	r3, [r2], #4

080009c8 <LoopFillZerobss>:
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <LoopFillZerobss+0x28>)
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d3f9      	bcc.n	80009c2 <FillZerobss>
 80009ce:	f7ff ffd3 	bl	8000978 <SystemInit>
 80009d2:	f000 f811 	bl	80009f8 <__libc_init_array>
 80009d6:	f7ff ff93 	bl	8000900 <main>
 80009da:	4770      	bx	lr
 80009dc:	20020000 	.word	0x20020000
 80009e0:	08000a68 	.word	0x08000a68
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000004 	.word	0x20000004
 80009ec:	20000004 	.word	0x20000004
 80009f0:	20000054 	.word	0x20000054

080009f4 <ADC_IRQHandler>:
 80009f4:	e7fe      	b.n	80009f4 <ADC_IRQHandler>
	...

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4e0d      	ldr	r6, [pc, #52]	; (8000a30 <__libc_init_array+0x38>)
 80009fc:	4c0d      	ldr	r4, [pc, #52]	; (8000a34 <__libc_init_array+0x3c>)
 80009fe:	1ba4      	subs	r4, r4, r6
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	2500      	movs	r5, #0
 8000a04:	42a5      	cmp	r5, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	4e0b      	ldr	r6, [pc, #44]	; (8000a38 <__libc_init_array+0x40>)
 8000a0a:	4c0c      	ldr	r4, [pc, #48]	; (8000a3c <__libc_init_array+0x44>)
 8000a0c:	f000 f818 	bl	8000a40 <_init>
 8000a10:	1ba4      	subs	r4, r4, r6
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	2500      	movs	r5, #0
 8000a16:	42a5      	cmp	r5, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a20:	4798      	blx	r3
 8000a22:	3501      	adds	r5, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a2a:	4798      	blx	r3
 8000a2c:	3501      	adds	r5, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	08000a58 	.word	0x08000a58
 8000a34:	08000a58 	.word	0x08000a58
 8000a38:	08000a58 	.word	0x08000a58
 8000a3c:	08000a60 	.word	0x08000a60

08000a40 <_init>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	bf00      	nop
 8000a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a46:	bc08      	pop	{r3}
 8000a48:	469e      	mov	lr, r3
 8000a4a:	4770      	bx	lr

08000a4c <_fini>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	bf00      	nop
 8000a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a52:	bc08      	pop	{r3}
 8000a54:	469e      	mov	lr, r3
 8000a56:	4770      	bx	lr
