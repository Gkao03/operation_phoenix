
ECE477_SeniorDesign_RC_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000084c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009d4  080009e4  000109e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009d4  080009d4  000109e4  2**0
                  CONTENTS
  4 .ARM          00000000  080009d4  080009d4  000109e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009d4  080009e4  000109e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080009d4  080009d4  000109d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080009e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080009e4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000109e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001268  00000000  00000000  00010a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000046f  00000000  00000000  00011c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000100  00000000  00000000  000120f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d8  00000000  00000000  000121f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fd35  00000000  00000000  000122c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000106c  00000000  00000000  00031ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1bbd  00000000  00000000  00033069  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  000f4ca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009bc 	.word	0x080009bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080009bc 	.word	0x080009bc

080001c8 <_ZN9ECE477_1723RobotMovementControllerC1Ev>:

	//Struct for controlling motors
	struct RobotMovementController
	{
		//Constructor
		RobotMovementController(void)
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
		{
			//Set all to forward by default
			this->backright_motor_dir 	= NONE;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2202      	movs	r2, #2
 80001d4:	70da      	strb	r2, [r3, #3]
			this->backleft_motor_dir 	= NONE;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2202      	movs	r2, #2
 80001da:	709a      	strb	r2, [r3, #2]
			this->frontright_motor_dir 	= NONE;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2202      	movs	r2, #2
 80001e0:	705a      	strb	r2, [r3, #1]
			this->frontleft_motor_dir 	= NONE;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2202      	movs	r2, #2
 80001e6:	701a      	strb	r2, [r3, #0]
			//Set movement state to Idle
			this->current_movement_state = IDLE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2200      	movs	r2, #0
 80001ec:	711a      	strb	r2, [r3, #4]
			this->updatedLatchValueToTransmit = 0x00;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	715a      	strb	r2, [r3, #5]
		}
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4618      	mov	r0, r3
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr

08000202 <_ZN9ECE477_1723RobotMovementControllerD1Ev>:

		//Destructor (unused)
		~RobotMovementController(void){}
 8000202:	b480      	push	{r7}
 8000204:	b083      	sub	sp, #12
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4618      	mov	r0, r3
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv>:

		//Assign new motor values to shift register
		//int& ithBitPosition...Transmit
		// Incremented by 1 everytime the callback is called. Once it hits 8, the internal flag 'latchTriggerUpdateStatus' is rest, signalling for this function to not send
		// new values to the shift register
		void ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback(void)
 8000218:	b480      	push	{r7}
 800021a:	b089      	sub	sp, #36	; 0x24
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
		{
			//Set LATCH low
			SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_LATCH;
 8000220:	4b37      	ldr	r3, [pc, #220]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	4a36      	ldr	r2, [pc, #216]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 8000226:	f023 0302 	bic.w	r3, r3, #2
 800022a:	6153      	str	r3, [r2, #20]

			//Wait
			for(unsigned int i = 0; i < 10000; i++);
 800022c:	2300      	movs	r3, #0
 800022e:	61fb      	str	r3, [r7, #28]
 8000230:	69fb      	ldr	r3, [r7, #28]
 8000232:	f242 720f 	movw	r2, #9999	; 0x270f
 8000236:	4293      	cmp	r3, r2
 8000238:	d803      	bhi.n	8000242 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x2a>
 800023a:	69fb      	ldr	r3, [r7, #28]
 800023c:	3301      	adds	r3, #1
 800023e:	61fb      	str	r3, [r7, #28]
 8000240:	e7f6      	b.n	8000230 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x18>

			//Transmit 8 bits to serial register
			for(int i = 0;i < 8; i++)
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
 8000246:	69bb      	ldr	r3, [r7, #24]
 8000248:	2b07      	cmp	r3, #7
 800024a:	dc4d      	bgt.n	80002e8 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xd0>
			{
				//Set CLK low
				SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_CLK;
 800024c:	4b2c      	ldr	r3, [pc, #176]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a2b      	ldr	r2, [pc, #172]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 8000252:	f023 0308 	bic.w	r3, r3, #8
 8000256:	6153      	str	r3, [r2, #20]
				//Wait
				for(unsigned int i = 0; i < 10000; i++);
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000262:	4293      	cmp	r3, r2
 8000264:	d803      	bhi.n	800026e <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x56>
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	3301      	adds	r3, #1
 800026a:	617b      	str	r3, [r7, #20]
 800026c:	e7f6      	b.n	800025c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x44>

				//Get the i'th bit position of latchValue
				//uint8_t ithBitValueOfLatchValueToTransmit = (this->updatedLatchValueToTransmit >> (7-i)) & 0x01;
				uint8_t ithBitValueOfLatchValueToTransmit = updatedLatchValueToTransmit & _BS((7-i));
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	795b      	ldrb	r3, [r3, #5]
 8000272:	b25a      	sxtb	r2, r3
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	f1c3 0307 	rsb	r3, r3, #7
 800027a:	2101      	movs	r1, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	b25b      	sxtb	r3, r3
 8000282:	4013      	ands	r3, r2
 8000284:	b25b      	sxtb	r3, r3
 8000286:	72fb      	strb	r3, [r7, #11]

				//Transmit the bits of the latchValueToTransmit
				if (ithBitValueOfLatchValueToTransmit)
 8000288:	7afb      	ldrb	r3, [r7, #11]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d006      	beq.n	800029c <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x84>
				{
					SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_DATA;
 800028e:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	e005      	b.n	80002a8 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x90>
				}
				else
				{
					SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_DATA;
 800029c:	4b18      	ldr	r3, [pc, #96]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	4a17      	ldr	r2, [pc, #92]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 80002a2:	f023 0304 	bic.w	r3, r3, #4
 80002a6:	6153      	str	r3, [r2, #20]
				}

				for(unsigned int i = 0; i < 10000; i++);
 80002a8:	2300      	movs	r3, #0
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d803      	bhi.n	80002be <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xa6>
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	3301      	adds	r3, #1
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	e7f6      	b.n	80002ac <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x94>

				SHIFT_REGISTER_GPIO->ODR |= SHIFT_REGISTER_CLK;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 80002c4:	f043 0308 	orr.w	r3, r3, #8
 80002c8:	6153      	str	r3, [r2, #20]
				//Wait
				for(unsigned int i = 0; i < 10000; i++);
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d803      	bhi.n	80002e0 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xc8>
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3301      	adds	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e7f6      	b.n	80002ce <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xb6>
			for(int i = 0;i < 8; i++)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
 80002e6:	e7ae      	b.n	8000246 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0x2e>
			}

			//Set LATCH high
			SHIFT_REGISTER_GPIO->ODR |= SHIFT_REGISTER_LATCH;
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv+0xe8>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6153      	str	r3, [r2, #20]

		}
 80002f4:	bf00      	nop
 80002f6:	3724      	adds	r7, #36	; 0x24
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40020000 	.word	0x40020000

08000304 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv>:
			SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_LATCH;
			SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_DATA;
		}


		void SetLatchPinsToDefaultState(void)
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
		{
			SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_LATCH;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a10      	ldr	r2, [pc, #64]	; (8000354 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6153      	str	r3, [r2, #20]
			//This needs to always be low
			SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_ENABLE;
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 800031e:	f023 0310 	bic.w	r3, r3, #16
 8000322:	6153      	str	r3, [r2, #20]
			SHIFT_REGISTER_GPIO->ODR &= ~SHIFT_REGISTER_DATA;
 8000324:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 800032a:	f023 0304 	bic.w	r3, r3, #4
 800032e:	6153      	str	r3, [r2, #20]
			SHIFT_REGISTER_GPIO->ODR |=  SHIFT_REGISTER_CLK;
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv+0x50>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6153      	str	r3, [r2, #20]

			this->SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 800033c:	2100      	movs	r1, #0
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f000 f80a 	bl	8000358 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
			this->ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f7ff ff67 	bl	8000218 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv>
		}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40020000 	.word	0x40020000

08000358 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>:


		//Set current movement state
		void SetCurrentMovementStateAndUpdateMotorDirection(ROBOT_MOVEMENT_STATE newState)
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	460b      	mov	r3, r1
 8000362:	70fb      	strb	r3, [r7, #3]
		{
			//Store the new state
			this->current_movement_state = newState;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	78fa      	ldrb	r2, [r7, #3]
 8000368:	711a      	strb	r2, [r3, #4]
			//Update motor directions
			switch(this->current_movement_state)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	791b      	ldrb	r3, [r3, #4]
 800036e:	2b06      	cmp	r3, #6
 8000370:	d86b      	bhi.n	800044a <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf2>
 8000372:	a201      	add	r2, pc, #4	; (adr r2, 8000378 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x20>)
 8000374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000378:	08000395 	.word	0x08000395
 800037c:	080003af 	.word	0x080003af
 8000380:	080003c9 	.word	0x080003c9
 8000384:	080003e3 	.word	0x080003e3
 8000388:	080003fd 	.word	0x080003fd
 800038c:	08000417 	.word	0x08000417
 8000390:	08000431 	.word	0x08000431
			{
				//IDLE: Robot is not moving
				case IDLE:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= NONE;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2202      	movs	r2, #2
 8000398:	70da      	strb	r2, [r3, #3]
					this->backleft_motor_dir 	= NONE;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2202      	movs	r2, #2
 800039e:	709a      	strb	r2, [r3, #2]
					this->frontright_motor_dir 	= NONE;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2202      	movs	r2, #2
 80003a4:	705a      	strb	r2, [r3, #1]
					this->frontleft_motor_dir 	= NONE;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2202      	movs	r2, #2
 80003aa:	701a      	strb	r2, [r3, #0]
					break;
 80003ac:	e04e      	b.n	800044c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case FULL_FORWARD:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2200      	movs	r2, #0
 80003b2:	70da      	strb	r2, [r3, #3]
					this->backleft_motor_dir 	= FORWARD;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2200      	movs	r2, #0
 80003b8:	709a      	strb	r2, [r3, #2]
					this->frontright_motor_dir 	= FORWARD;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	705a      	strb	r2, [r3, #1]
					this->frontleft_motor_dir 	= FORWARD;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
					break;
 80003c6:	e041      	b.n	800044c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case FULL_REVERSE:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= REVERSE;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	70da      	strb	r2, [r3, #3]
					this->backleft_motor_dir 	= REVERSE;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2201      	movs	r2, #1
 80003d2:	709a      	strb	r2, [r3, #2]
					this->frontright_motor_dir 	= REVERSE;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2201      	movs	r2, #1
 80003d8:	705a      	strb	r2, [r3, #1]
					this->frontleft_motor_dir 	= REVERSE;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2201      	movs	r2, #1
 80003de:	701a      	strb	r2, [r3, #0]
					break;
 80003e0:	e034      	b.n	800044c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case TANK_ROTATE_LEFT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	70da      	strb	r2, [r3, #3]
					this->backleft_motor_dir 	= REVERSE;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2201      	movs	r2, #1
 80003ec:	709a      	strb	r2, [r3, #2]
					this->frontright_motor_dir 	= FORWARD;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2200      	movs	r2, #0
 80003f2:	705a      	strb	r2, [r3, #1]
					this->frontleft_motor_dir 	= REVERSE;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
					break;
 80003fa:	e027      	b.n	800044c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case TANK_ROTATE_RIGHT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= REVERSE;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2201      	movs	r2, #1
 8000400:	70da      	strb	r2, [r3, #3]
					this->backleft_motor_dir 	= FORWARD;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2200      	movs	r2, #0
 8000406:	709a      	strb	r2, [r3, #2]
					this->frontright_motor_dir 	= REVERSE;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2201      	movs	r2, #1
 800040c:	705a      	strb	r2, [r3, #1]
					this->frontleft_motor_dir 	= FORWARD;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
					break;
 8000414:	e01a      	b.n	800044c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				case SOFT_ROTATE_LEFT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= FORWARD;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2200      	movs	r2, #0
 800041a:	70da      	strb	r2, [r3, #3]
					this->backleft_motor_dir 	= NONE;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2202      	movs	r2, #2
 8000420:	709a      	strb	r2, [r3, #2]
					this->frontright_motor_dir 	= FORWARD;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2200      	movs	r2, #0
 8000426:	705a      	strb	r2, [r3, #1]
					this->frontleft_motor_dir 	= NONE;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2202      	movs	r2, #2
 800042c:	701a      	strb	r2, [r3, #0]
					break;
 800042e:	e00d      	b.n	800044c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>


				case SOFT_ROTATE_RIGHT:
				{
					//Set all to forward by default
					this->backright_motor_dir 	= NONE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2202      	movs	r2, #2
 8000434:	70da      	strb	r2, [r3, #3]
					this->backleft_motor_dir 	= FORWARD;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	709a      	strb	r2, [r3, #2]
					this->frontright_motor_dir 	= NONE;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2202      	movs	r2, #2
 8000440:	705a      	strb	r2, [r3, #1]
					this->frontleft_motor_dir 	= FORWARD;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]
					break;
 8000448:	e000      	b.n	800044c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xf4>
				}

				//Default case. Shouldn't be a problem.
				default: break;
 800044a:	bf00      	nop
			}
			//Update the latchValueToTransmit based on our updated movement control state
			UpdateMotorEnableDirectionInLatchValueToTransmit(FRONT_LEFT, this->frontleft_motor_dir);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f000 f819 	bl	800048c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(FRONT_RIGHT, this->frontright_motor_dir);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	785b      	ldrb	r3, [r3, #1]
 800045e:	461a      	mov	r2, r3
 8000460:	2101      	movs	r1, #1
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 f812 	bl	800048c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(BACK_LEFT, this->backleft_motor_dir);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	789b      	ldrb	r3, [r3, #2]
 800046c:	461a      	mov	r2, r3
 800046e:	2103      	movs	r1, #3
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 f80b 	bl	800048c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
			UpdateMotorEnableDirectionInLatchValueToTransmit(BACK_RIGHT, this->backright_motor_dir);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	78db      	ldrb	r3, [r3, #3]
 800047a:	461a      	mov	r2, r3
 800047c:	2102      	movs	r1, #2
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 f804 	bl	800048c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>
		}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE>:

		//Private member variables and functions
		private:

		void UpdateMotorEnableDirectionInLatchValueToTransmit(MOTOR_ID motor, MOTOR_DIRECTION direction)
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
 8000498:	4613      	mov	r3, r2
 800049a:	70bb      	strb	r3, [r7, #2]
		{
			//CAUTION! - to move forward the motors on the left and right of the chassis need 'reversed' polarity / direction to move forward or back. Think about what happens when you take a motor on the left and flip it 180. If you set all motors to same direction the robot will rotate around
			//its center
			if(motor == FRONT_RIGHT)
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d134      	bne.n	800050c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
			{
				//Look at the direction
				if(direction == NONE)
 80004a2:	78bb      	ldrb	r3, [r7, #2]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d10e      	bne.n	80004c6 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x3a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_A;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	f023 0320 	bic.w	r3, r3, #32
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_B;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	715a      	strb	r2, [r3, #5]
 80004c4:	e022      	b.n	800050c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				}
				else if(direction == FORWARD)
 80004c6:	78bb      	ldrb	r3, [r7, #2]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d10e      	bne.n	80004ea <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x5e>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_FR_A;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	f043 0320 	orr.w	r3, r3, #32
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_B;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	795b      	ldrb	r3, [r3, #5]
 80004de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	715a      	strb	r2, [r3, #5]
 80004e8:	e010      	b.n	800050c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				}
				else if(direction == REVERSE)
 80004ea:	78bb      	ldrb	r3, [r7, #2]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10d      	bne.n	800050c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x80>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FR_A;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	f023 0320 	bic.w	r3, r3, #32
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit |=  MOTOR_FR_B;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	795b      	ldrb	r3, [r3, #5]
 8000502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000506:	b2da      	uxtb	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	715a      	strb	r2, [r3, #5]
				}
			}

			if(motor == BACK_RIGHT)
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d134      	bne.n	800057c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
			{
				//Look at the direction
				if(direction == NONE)
 8000512:	78bb      	ldrb	r3, [r7, #2]
 8000514:	2b02      	cmp	r3, #2
 8000516:	d10e      	bne.n	8000536 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xaa>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_A;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	f023 0301 	bic.w	r3, r3, #1
 8000520:	b2da      	uxtb	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_B;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	715a      	strb	r2, [r3, #5]
 8000534:	e022      	b.n	800057c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				}
				else if(direction == FORWARD)
 8000536:	78bb      	ldrb	r3, [r7, #2]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10e      	bne.n	800055a <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xce>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_BR_A;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	b2da      	uxtb	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_B;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000552:	b2da      	uxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	715a      	strb	r2, [r3, #5]
 8000558:	e010      	b.n	800057c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				}
				else if(direction == REVERSE)
 800055a:	78bb      	ldrb	r3, [r7, #2]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d10d      	bne.n	800057c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0xf0>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BR_A;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	f023 0301 	bic.w	r3, r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit |=  MOTOR_BR_B;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000576:	b2da      	uxtb	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	715a      	strb	r2, [r3, #5]
				}
			}
//DIFFERENT SIDES OF CHASSIS -------------------------------------------------------------------------------
			if(motor == FRONT_LEFT)
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d134      	bne.n	80005ec <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
			{
				//Look at the direction
				if(direction == NONE)
 8000582:	78bb      	ldrb	r3, [r7, #2]
 8000584:	2b02      	cmp	r3, #2
 8000586:	d10e      	bne.n	80005a6 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x11a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_A;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	f023 0304 	bic.w	r3, r3, #4
 8000590:	b2da      	uxtb	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_B;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	795b      	ldrb	r3, [r3, #5]
 800059a:	f023 0308 	bic.w	r3, r3, #8
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	715a      	strb	r2, [r3, #5]
 80005a4:	e022      	b.n	80005ec <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				}
				else if(direction == FORWARD)
 80005a6:	78bb      	ldrb	r3, [r7, #2]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10e      	bne.n	80005ca <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x13e>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_A;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	f023 0304 	bic.w	r3, r3, #4
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit |=  MOTOR_FL_B;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	715a      	strb	r2, [r3, #5]
 80005c8:	e010      	b.n	80005ec <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				}
				else if(direction == REVERSE)
 80005ca:	78bb      	ldrb	r3, [r7, #2]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d10d      	bne.n	80005ec <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x160>
				{
					this->updatedLatchValueToTransmit |=  MOTOR_FL_A;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	795b      	ldrb	r3, [r3, #5]
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit &= ~MOTOR_FL_B;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	f023 0308 	bic.w	r3, r3, #8
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	715a      	strb	r2, [r3, #5]
				}
			}
			if(motor == BACK_LEFT)
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d134      	bne.n	800065c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
			{
				//Look at the direction
				if(direction == NONE)
 80005f2:	78bb      	ldrb	r3, [r7, #2]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d10e      	bne.n	8000616 <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x18a>
				{
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_A;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	f023 0302 	bic.w	r3, r3, #2
 8000600:	b2da      	uxtb	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	715a      	strb	r2, [r3, #5]
				{
					this->updatedLatchValueToTransmit |=  MOTOR_BL_A;
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
				}
			}
		}
 8000614:	e022      	b.n	800065c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
				else if(direction == FORWARD)
 8000616:	78bb      	ldrb	r3, [r7, #2]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10e      	bne.n	800063a <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1ae>
					this->updatedLatchValueToTransmit &=  ~MOTOR_BL_A;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	f023 0302 	bic.w	r3, r3, #2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit |=  MOTOR_BL_B;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	795b      	ldrb	r3, [r3, #5]
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	b2da      	uxtb	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	715a      	strb	r2, [r3, #5]
		}
 8000638:	e010      	b.n	800065c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
				else if(direction == REVERSE)
 800063a:	78bb      	ldrb	r3, [r7, #2]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10d      	bne.n	800065c <_ZN9ECE477_1723RobotMovementController48UpdateMotorEnableDirectionInLatchValueToTransmitENS_8MOTOR_IDENS_15MOTOR_DIRECTIONE+0x1d0>
					this->updatedLatchValueToTransmit |=  MOTOR_BL_A;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	795b      	ldrb	r3, [r3, #5]
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	b2da      	uxtb	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	715a      	strb	r2, [r3, #5]
					this->updatedLatchValueToTransmit &= ~MOTOR_BL_B;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	f023 0310 	bic.w	r3, r3, #16
 8000656:	b2da      	uxtb	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	715a      	strb	r2, [r3, #5]
		}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <TIM3_IRQHandler>:
extern ECE477_17::RobotMovementController movementController;

extern "C"
{
	void TIM3_IRQHandler(void)
	{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
		*/



		//Zero out SR so we indicate we have finished the interrupt routine (else get stuck here.... forever!)
		TIM3->SR = 0;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <TIM3_IRQHandler+0x14>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
	}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	40000400 	.word	0x40000400

08000680 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv>:
namespace ECE477_17
{
	namespace Timer
	{
		void GPIOA_ShiftRegisterPins_Init(void)
		{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
			RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOAEN;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x74>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x74>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6313      	str	r3, [r2, #48]	; 0x30

			GPIOA->MODER 	|= ( _BS(2) | _BS(4) | _BS(6) | _BS(8) ); //Set output mode for GPIOA 1-4
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 8000696:	f443 73aa 	orr.w	r3, r3, #340	; 0x154
 800069a:	6013      	str	r3, [r2, #0]
			GPIOA->OSPEEDR 	|= ( _BS(2) | _BS(3) | _BS(4) | _BS(5) | _BS(6) | _BS(7) | _BS(8) | _BS(9) );
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 80006a2:	f443 737f 	orr.w	r3, r3, #1020	; 0x3fc
 80006a6:	6093      	str	r3, [r2, #8]
			GPIOA->ODR   	= 0; //Everything is 0 by default
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x78>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]

			//Enable GPIOD for blue LED
			RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIODEN;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x74>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x74>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOD->MODER 	|= _BS(28) | _BS(26); //Set GPIOD 14,13 to output mode
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80006c0:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 80006c4:	6013      	str	r3, [r2, #0]
			GPIOD->ODR   	= 0; //Everything is 0 by default
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
			GPIOD->ODR 		|= _BS(14);
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6153      	str	r3, [r2, #20]
			GPIOD->PUPDR	= 0;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
			GPIOD->OSPEEDR  |= _BS(28) | _BS(26);
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv+0x7c>)
 80006e4:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 80006e8:	6093      	str	r3, [r2, #8]
		}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020c00 	.word	0x40020c00

08000700 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv>:

		//Initialize TIM1 and its 4 Channels
		void TIM1_PWM_Init(void)
		{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
			//Enable Clock to TIM1, GPIOE (PWM GPIO pins)
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6313      	str	r3, [r2, #48]	; 0x30
			RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 8000712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6453      	str	r3, [r2, #68]	; 0x44

			//Select TIM1 Channels for PE9,11,13,14
			GPIOE->AFR[1] 	= ( _BS(4) | _BS(12) | _BS(20) | _BS(24) ); //Choose AF's
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 800071e:	4a27      	ldr	r2, [pc, #156]	; (80007bc <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOE->MODER  	= ( _BS(19) | _BS(23) | _BS(27) | _BS(29) ); //Set to AF mode
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 8000724:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc0>)
 8000726:	601a      	str	r2, [r3, #0]
			GPIOE->OSPEEDR 	= ( _BS(19) | _BS(23) | _BS(27) | _BS(29) ); //Set to high speed
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 800072a:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc0>)
 800072c:	609a      	str	r2, [r3, #8]
			GPIOE->PUPDR	= 0;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]

			//Setup TIM1
			//Recall: System runs at 25MHz, and we want ~490   Hz???
			TIM1->ARR = 3000-1;
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000736:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC = 17-1;
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 800073e:	2210      	movs	r2, #16
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
			//TIM1->DIER |= _BS(0); //Enable UIE
			//TIM1->EGR  |= _BS(0); //Generate update
			TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; //Set PWM Mode
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000748:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800074c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000750:	6193      	str	r3, [r2, #24]
			TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000758:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800075c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000760:	61d3      	str	r3, [r2, #28]
			TIM1->CCR1	= 3000;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000764:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 	= 3000;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 800076c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000770:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3	= 3000;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000774:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000778:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4	= 3000;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 800077c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000780:	641a      	str	r2, [r3, #64]	; 0x40

			//Duty Cycle for CCRX = ARR / CCRX

			TIM1->CCER  |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000788:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800078c:	f043 0311 	orr.w	r3, r3, #17
 8000790:	6213      	str	r3, [r2, #32]
			TIM1->BDTR  |= TIM_BDTR_MOE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 8000798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079c:	6453      	str	r3, [r2, #68]	; 0x44

			TIM1->CR1  |= TIM_CR1_CEN; //Count enable
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xc4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6013      	str	r3, [r2, #0]
		}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	01101010 	.word	0x01101010
 80007c0:	28880000 	.word	0x28880000
 80007c4:	40010000 	.word	0x40010000

080007c8 <_ZN9ECE477_175Timer9TIM3_InitEv>:
			TIM1_StartPWM();
		}

		//TIM3 - Interrupt generator for shift register control
		void TIM3_Init(void)
		{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
			//Clock TIM3
			RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <_ZN9ECE477_175Timer9TIM3_InitEv+0x3c>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <_ZN9ECE477_175Timer9TIM3_InitEv+0x3c>)
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
			//Setup TIM1
			//42 HZ transmittion 2000-1, 2000-1
			//For seeing on scope
			TIM3->ARR 	= 500-1;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <_ZN9ECE477_175Timer9TIM3_InitEv+0x40>)
 80007da:	f240 12f3 	movw	r2, #499	; 0x1f3
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC 	= 500-1;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <_ZN9ECE477_175Timer9TIM3_InitEv+0x40>)
 80007e2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->DIER	|= TIM_DIER_UIE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <_ZN9ECE477_175Timer9TIM3_InitEv+0x40>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <_ZN9ECE477_175Timer9TIM3_InitEv+0x40>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	60d3      	str	r3, [r2, #12]
			TIM3->SR	= 0;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <_ZN9ECE477_175Timer9TIM3_InitEv+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//Uncomment to enable IRQ
			//NVIC->ISER[0] |= _BS(TIM3_IRQn);
			//__enable_irq();
			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40023800 	.word	0x40023800
 8000808:	40000400 	.word	0x40000400

0800080c <main>:
using namespace Timer;

RobotMovementController movementController;

int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
	GPIOA_ShiftRegisterPins_Init();
 8000812:	f7ff ff35 	bl	8000680 <_ZN9ECE477_175Timer28GPIOA_ShiftRegisterPins_InitEv>
	TIM1_PWM_Init();
 8000816:	f7ff ff73 	bl	8000700 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv>
	TIM3_Init();
 800081a:	f7ff ffd5 	bl	80007c8 <_ZN9ECE477_175Timer9TIM3_InitEv>
	//TIM3_Start();

	GPIOD->ODR |= _BS(13); //Turn on orange LED
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <main+0x78>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a18      	ldr	r2, [pc, #96]	; (8000884 <main+0x78>)
 8000824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000828:	6153      	str	r3, [r2, #20]
	movementController.SetLatchPinsToDefaultState();
 800082a:	4817      	ldr	r0, [pc, #92]	; (8000888 <main+0x7c>)
 800082c:	f7ff fd6a 	bl	8000304 <_ZN9ECE477_1723RobotMovementController26SetLatchPinsToDefaultStateEv>
	//movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
	//Main Program Loop

	while(true)
	{
		for(int i = 0;i < 100000;i++);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <main+0x80>)
 8000838:	4293      	cmp	r3, r2
 800083a:	dc03      	bgt.n	8000844 <main+0x38>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	e7f7      	b.n	8000834 <main+0x28>
		movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 8000844:	2100      	movs	r1, #0
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <main+0x7c>)
 8000848:	f7ff fd86 	bl	8000358 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
		movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
 800084c:	480e      	ldr	r0, [pc, #56]	; (8000888 <main+0x7c>)
 800084e:	f7ff fce3 	bl	8000218 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv>
		for(int i = 0;i < 100000;i++);
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <main+0x80>)
 800085a:	4293      	cmp	r3, r2
 800085c:	dc03      	bgt.n	8000866 <main+0x5a>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	e7f7      	b.n	8000856 <main+0x4a>
		movementController.SetCurrentMovementStateAndUpdateMotorDirection(FULL_FORWARD);
 8000866:	2101      	movs	r1, #1
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <main+0x7c>)
 800086a:	f7ff fd75 	bl	8000358 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
		movementController.ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallback();
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <main+0x7c>)
 8000870:	f7ff fcd2 	bl	8000218 <_ZN9ECE477_1723RobotMovementController68ShiftRegisterAssignMotorEnableDirectionValues_TIM3_InterruptCallbackEv>

		GPIOD->ODR ^= _BS(13);
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <main+0x78>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a02      	ldr	r2, [pc, #8]	; (8000884 <main+0x78>)
 800087a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800087e:	6153      	str	r3, [r2, #20]
	}
 8000880:	e7d6      	b.n	8000830 <main+0x24>
 8000882:	bf00      	nop
 8000884:	40020c00 	.word	0x40020c00
 8000888:	2000001c 	.word	0x2000001c
 800088c:	0001869f 	.word	0x0001869f

08000890 <_Z41__static_initialization_and_destruction_0ii>:

}
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d107      	bne.n	80008b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d102      	bne.n	80008b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
RobotMovementController movementController;
 80008aa:	4809      	ldr	r0, [pc, #36]	; (80008d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80008ac:	f7ff fc8c 	bl	80001c8 <_ZN9ECE477_1723RobotMovementControllerC1Ev>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d107      	bne.n	80008c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008bc:	4293      	cmp	r3, r2
 80008be:	d102      	bne.n	80008c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80008c2:	f7ff fc9e 	bl	8000202 <_ZN9ECE477_1723RobotMovementControllerD1Ev>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000001c 	.word	0x2000001c

080008d4 <_GLOBAL__sub_I_TIM3_IRQHandler>:
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff ffd7 	bl	8000890 <_Z41__static_initialization_and_destruction_0ii>
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_GLOBAL__sub_D_TIM3_IRQHandler>:
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff ffcf 	bl	8000890 <_Z41__static_initialization_and_destruction_0ii>
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <SystemInit+0x28>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <SystemInit+0x28>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <SystemInit+0x28>)
 800090a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800090e:	609a      	str	r2, [r3, #8]
#endif
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000924:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000926:	e003      	b.n	8000930 <LoopCopyDataInit>

08000928 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800092a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800092c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800092e:	3104      	adds	r1, #4

08000930 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000934:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000938:	d3f6      	bcc.n	8000928 <CopyDataInit>
  ldr  r2, =_sbss
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800093c:	e002      	b.n	8000944 <LoopFillZerobss>

0800093e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800093e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000940:	f842 3b04 	str.w	r3, [r2], #4

08000944 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000946:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000948:	d3f9      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800094a:	f7ff ffd3 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f000 f811 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff ff5b 	bl	800080c <main>
  bx  lr    
 8000956:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000958:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800095c:	080009e4 	.word	0x080009e4
  ldr  r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000964:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000968:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800096c:	20000024 	.word	0x20000024

08000970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>
	...

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4e0d      	ldr	r6, [pc, #52]	; (80009ac <__libc_init_array+0x38>)
 8000978:	4c0d      	ldr	r4, [pc, #52]	; (80009b0 <__libc_init_array+0x3c>)
 800097a:	1ba4      	subs	r4, r4, r6
 800097c:	10a4      	asrs	r4, r4, #2
 800097e:	2500      	movs	r5, #0
 8000980:	42a5      	cmp	r5, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	4e0b      	ldr	r6, [pc, #44]	; (80009b4 <__libc_init_array+0x40>)
 8000986:	4c0c      	ldr	r4, [pc, #48]	; (80009b8 <__libc_init_array+0x44>)
 8000988:	f000 f818 	bl	80009bc <_init>
 800098c:	1ba4      	subs	r4, r4, r6
 800098e:	10a4      	asrs	r4, r4, #2
 8000990:	2500      	movs	r5, #0
 8000992:	42a5      	cmp	r5, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800099c:	4798      	blx	r3
 800099e:	3501      	adds	r5, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009a6:	4798      	blx	r3
 80009a8:	3501      	adds	r5, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	080009d4 	.word	0x080009d4
 80009b0:	080009d4 	.word	0x080009d4
 80009b4:	080009d4 	.word	0x080009d4
 80009b8:	080009dc 	.word	0x080009dc

080009bc <_init>:
 80009bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009be:	bf00      	nop
 80009c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c2:	bc08      	pop	{r3}
 80009c4:	469e      	mov	lr, r3
 80009c6:	4770      	bx	lr

080009c8 <_fini>:
 80009c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ca:	bf00      	nop
 80009cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ce:	bc08      	pop	{r3}
 80009d0:	469e      	mov	lr, r3
 80009d2:	4770      	bx	lr
