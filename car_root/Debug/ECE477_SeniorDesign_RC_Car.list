
ECE477_SeniorDesign_RC_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800076c  0800076c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800076c  0800076c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800076c  0800076c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800076c  0800076c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800076c  0800076c  0001076c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08000774  08000774  00010774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800077c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000780  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000780  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001581  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000553  00000000  00000000  000215b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000130  00000000  00000000  00021b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00021c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fb9b  00000000  00000000  00021d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000109e  00000000  00000000  000418db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1893  00000000  00000000  00042979  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010420c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000400  00000000  00000000  00104288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000754 	.word	0x08000754

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000754 	.word	0x08000754

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0d      	blt.n	80001f6 <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	f003 021f 	and.w	r2, r3, #31
 80001e4:	4907      	ldr	r1, [pc, #28]	; (8000204 <__NVIC_EnableIRQ+0x3c>)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	095b      	lsrs	r3, r3, #5
 80001ec:	2001      	movs	r0, #1
 80001ee:	fa00 f202 	lsl.w	r2, r0, r2
 80001f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100

08000208 <_ZN9ECE477_1723RobotMovementControllerC1Ev>:

	//Struct for controlling motors
	struct RobotMovementController
	{
		//Constructor
		RobotMovementController(void)
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
		{
			//Set all to forward by default
			this->right_side_direction 	= NONE;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2202      	movs	r2, #2
 8000214:	715a      	strb	r2, [r3, #5]
			this->left_side_direction 	= NONE;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2202      	movs	r2, #2
 800021a:	711a      	strb	r2, [r3, #4]
			//Set movement state to Idle
			this->current_movement_state = IDLE;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	719a      	strb	r2, [r3, #6]
			//Set speed - full speed by default
			this->speed = PWM_DUTY_CYCLE_FULL_SPEED;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2214      	movs	r2, #20
 8000226:	601a      	str	r2, [r3, #0]
		}
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4618      	mov	r0, r3
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr

08000236 <_ZN9ECE477_1723RobotMovementControllerD1Ev>:

		//Destructor (unused)
		~RobotMovementController(void){}
 8000236:	b480      	push	{r7}
 8000238:	b083      	sub	sp, #12
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4618      	mov	r0, r3
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <_ZN9ECE477_1723RobotMovementController12SetHighSpeedEv>:

		//Helper functions to set speed
		void SetHighSpeed(void) { this->speed = PWM_DUTY_CYCLE_FULL_SPEED; }
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2214      	movs	r2, #20
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <_ZN9ECE477_1723RobotMovementController11SetLowSpeedEv>:
		void SetLowSpeed(void) { this->speed = PWM_DUTY_CYCLE_LOW_SPEED; }
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	220c      	movs	r2, #12
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>:

		//Set current movement state
		void SetCurrentMovementStateAndUpdateMotorDirection(ROBOT_MOVEMENT_STATE newState)
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
		{
			//Store the new state
			this->current_movement_state = newState;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	78fa      	ldrb	r2, [r7, #3]
 8000290:	719a      	strb	r2, [r3, #6]
			//Update motor directions
			switch(this->current_movement_state)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	799b      	ldrb	r3, [r3, #6]
 8000296:	2b04      	cmp	r3, #4
 8000298:	d82f      	bhi.n	80002fa <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x7a>
 800029a:	a201      	add	r2, pc, #4	; (adr r2, 80002a0 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x20>)
 800029c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a0:	080002b5 	.word	0x080002b5
 80002a4:	080002c3 	.word	0x080002c3
 80002a8:	080002d1 	.word	0x080002d1
 80002ac:	080002df 	.word	0x080002df
 80002b0:	080002ed 	.word	0x080002ed
			{
				//IDLE: Robot is not moving
				case IDLE:
				{
					//Set all to forward by default
					this->right_side_direction 	= NONE;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2202      	movs	r2, #2
 80002b8:	715a      	strb	r2, [r3, #5]
					this->left_side_direction 	= NONE;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2202      	movs	r2, #2
 80002be:	711a      	strb	r2, [r3, #4]
				}break;
 80002c0:	e01c      	b.n	80002fc <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x7c>

				case FULL_FORWARD:
				{
					this->right_side_direction 	= FORWARD;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	715a      	strb	r2, [r3, #5]
					this->left_side_direction 	= FORWARD;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2200      	movs	r2, #0
 80002cc:	711a      	strb	r2, [r3, #4]
				}break;
 80002ce:	e015      	b.n	80002fc <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x7c>

				case FULL_REVERSE:
				{
					this->right_side_direction 	= REVERSE;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2201      	movs	r2, #1
 80002d4:	715a      	strb	r2, [r3, #5]
					this->left_side_direction 	= REVERSE;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	711a      	strb	r2, [r3, #4]
				}break;
 80002dc:	e00e      	b.n	80002fc <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x7c>

				case TANK_ROTATE_LEFT:
				{
					this->right_side_direction 	= FORWARD;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2200      	movs	r2, #0
 80002e2:	715a      	strb	r2, [r3, #5]
					this->left_side_direction 	= REVERSE;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2201      	movs	r2, #1
 80002e8:	711a      	strb	r2, [r3, #4]
				}break;
 80002ea:	e007      	b.n	80002fc <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x7c>

				case TANK_ROTATE_RIGHT:
				{
					this->right_side_direction 	= REVERSE;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2201      	movs	r2, #1
 80002f0:	715a      	strb	r2, [r3, #5]
					this->left_side_direction 	= FORWARD;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	711a      	strb	r2, [r3, #4]
				}break;
 80002f8:	e000      	b.n	80002fc <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0x7c>
				//Default case. Shouldn't be a problem.
				default: break;
 80002fa:	bf00      	nop
			}
			//Update PWM CCR registers
			UpdatePWMCCRxRegisterBasedOnDirection(this->left_side_direction, LEFT_SIDE_MOTOR_EN_A, LEFT_SIDE_MOTOR_EN_B);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	7919      	ldrb	r1, [r3, #4]
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xa0>)
 8000302:	4a08      	ldr	r2, [pc, #32]	; (8000324 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xa4>)
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f813 	bl	8000330 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_>
			UpdatePWMCCRxRegisterBasedOnDirection(this->right_side_direction, RIGHT_SIDE_MOTOR_EN_A, RIGHT_SIDE_MOTOR_EN_B);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	7959      	ldrb	r1, [r3, #5]
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xa8>)
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE+0xac>)
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f80c 	bl	8000330 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_>
		}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010038 	.word	0x40010038
 8000324:	40010034 	.word	0x40010034
 8000328:	40010040 	.word	0x40010040
 800032c:	4001003c 	.word	0x4001003c

08000330 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_>:

		//Private member variables and functions
		private:

		//Helper function to set
		void UpdatePWMCCRxRegisterBasedOnDirection(MOTOR_DIRECTION dir, volatile uint32_t* const CCRxPtrA, volatile uint32_t* const CCRxPtrB )
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	607a      	str	r2, [r7, #4]
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	460b      	mov	r3, r1
 800033e:	72fb      	strb	r3, [r7, #11]
		{
			//Set  both to 0, then wait
			(*CCRxPtrA) = 0;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
			(*CCRxPtrB) = 0;
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]

			//Fools wait
			for(int i = 0;i < 10000;i++);
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	f242 720f 	movw	r2, #9999	; 0x270f
 8000356:	4293      	cmp	r3, r2
 8000358:	dc03      	bgt.n	8000362 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_+0x32>
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	3301      	adds	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	e7f6      	b.n	8000350 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_+0x20>

			if(dir == NONE)
 8000362:	7afb      	ldrb	r3, [r7, #11]
 8000364:	2b02      	cmp	r3, #2
 8000366:	d106      	bne.n	8000376 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_+0x46>
			{
				(*CCRxPtrA) = 0;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
				(*CCRxPtrB) = 0;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
			else if(dir == REVERSE)
			{
				(*CCRxPtrA) = 0;
				(*CCRxPtrB) = this->speed;
			}
		}
 8000374:	e014      	b.n	80003a0 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_+0x70>
			else if(dir == FORWARD)
 8000376:	7afb      	ldrb	r3, [r7, #11]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d107      	bne.n	800038c <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_+0x5c>
				(*CCRxPtrA) = this->speed;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	601a      	str	r2, [r3, #0]
				(*CCRxPtrB) = 0;
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
		}
 800038a:	e009      	b.n	80003a0 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_+0x70>
			else if(dir == REVERSE)
 800038c:	7afb      	ldrb	r3, [r7, #11]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d106      	bne.n	80003a0 <_ZN9ECE477_1723RobotMovementController37UpdatePWMCCRxRegisterBasedOnDirectionENS_15MOTOR_DIRECTIONEPVmS3_+0x70>
				(*CCRxPtrA) = 0;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
				(*CCRxPtrB) = this->speed;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	601a      	str	r2, [r3, #0]
		}
 80003a0:	bf00      	nop
 80003a2:	371c      	adds	r7, #28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <TIM3_IRQHandler>:
extern ECE477_17::RobotMovementController movementController;

extern "C"
{
	void TIM3_IRQHandler(void)
	{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
		//Zero out SR so we indicate we have finished the interrupt routine (else get stuck here.... forever!)
		TIM3->SR = 0;
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <TIM3_IRQHandler+0x14>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
	}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40000400 	.word	0x40000400

080003c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv>:
			GPIOD->OSPEEDR  |= _BS(28) | _BS(26);
		}

		//Initialize TIM1 and its 4 Channels
		void TIM1_PWM_Init(void)
		{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
			//Enable Clock to TIM1, GPIOE (PWM GPIO pins)
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80003c8:	4b29      	ldr	r3, [pc, #164]	; (8000470 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xac>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a28      	ldr	r2, [pc, #160]	; (8000470 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xac>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
			RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xac>)
 80003d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d8:	4a25      	ldr	r2, [pc, #148]	; (8000470 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xac>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6453      	str	r3, [r2, #68]	; 0x44

			//Select TIM1 Channels for PE9 and NOT 11,13,14
			GPIOE->AFR[1] 	= ( _BS(4) | _BS(12) | _BS(20) | _BS(24) ); //Choose AF's
 80003e0:	4b24      	ldr	r3, [pc, #144]	; (8000474 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb0>)
 80003e2:	4a25      	ldr	r2, [pc, #148]	; (8000478 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb4>)
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOE->MODER  	= ( _BS(19) | _BS(23) | _BS(27) | _BS(29) ); //Set to AF mode
 80003e6:	4b23      	ldr	r3, [pc, #140]	; (8000474 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb0>)
 80003e8:	4a24      	ldr	r2, [pc, #144]	; (800047c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 80003ea:	601a      	str	r2, [r3, #0]
			GPIOE->OSPEEDR 	= ( _BS(19) | _BS(23) | _BS(27) | _BS(29) ); //Set to high speed
 80003ec:	4b21      	ldr	r3, [pc, #132]	; (8000474 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb0>)
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb8>)
 80003f0:	609a      	str	r2, [r3, #8]
			GPIOE->PUPDR	= 0;
 80003f2:	4b20      	ldr	r3, [pc, #128]	; (8000474 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xb0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]

			//Setup TIM1
			//Recall: System runs at 25MHz, and we want 2.5 kHz frequency
			TIM1->ARR = 20-1;
 80003f8:	4b21      	ldr	r3, [pc, #132]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 80003fa:	2213      	movs	r2, #19
 80003fc:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC = 500-1;
 80003fe:	4b20      	ldr	r3, [pc, #128]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000400:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
			//TIM1->DIER |= _BS(0); //Enable UIE
			//TIM1->EGR  |= _BS(0); //Generate update
			TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; //Set PWM Mode
 8000406:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a1d      	ldr	r2, [pc, #116]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800040c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000410:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000414:	6193      	str	r3, [r2, #24]

			TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a19      	ldr	r2, [pc, #100]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800041c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000420:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000424:	61d3      	str	r3, [r2, #28]
			//To move forward, set CCR2 to 0 and CCR1 to < 20.
			// To move in reverse, set CCR1 to 0 and CCR2 to < 20.
			// DO NOT SET BOTH CCRs to non-zero values.
			// NEED TO SELECT WHETHER Channels 1 and 2 correspond to left or right of vehicle
			// Manually toggling these right now, need to make them automatically switch
			TIM1->CCR1	= 20;
 8000426:	4b16      	ldr	r3, [pc, #88]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000428:	2214      	movs	r2, #20
 800042a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 	= 0;
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800042e:	2200      	movs	r2, #0
 8000430:	639a      	str	r2, [r3, #56]	; 0x38
			//To move forward, set CCR4 to 0 and CCR3 to < 20.
			// To move in reverse, set CCR3 to 0 and CCR4 to < 20.
			// DO NOT SET BOTH CCRs to non-zero values.
			// Manually toggling these right now, need to make them automatically switch
			// NEED TO SELECT WHETHER Channels 3 and 4 correspond to left or right of vehicle
			TIM1->CCR3	= 20;
 8000432:	4b13      	ldr	r3, [pc, #76]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000434:	2214      	movs	r2, #20
 8000436:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4	= 0;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800043a:	2200      	movs	r2, #0
 800043c:	641a      	str	r2, [r3, #64]	; 0x40

			//Duty Cycle is CCRX / ARR
			TIM1->CCER  |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000440:	6a1b      	ldr	r3, [r3, #32]
 8000442:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000444:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8000448:	f043 0311 	orr.w	r3, r3, #17
 800044c:	6213      	str	r3, [r2, #32]
			TIM1->BDTR  |= TIM_BDTR_MOE;
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000458:	6453      	str	r3, [r2, #68]	; 0x44

			TIM1->CR1  |= TIM_CR1_CEN; //Count enable
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a08      	ldr	r2, [pc, #32]	; (8000480 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv+0xbc>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6013      	str	r3, [r2, #0]
		}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40023800 	.word	0x40023800
 8000474:	40021000 	.word	0x40021000
 8000478:	01101010 	.word	0x01101010
 800047c:	28880000 	.word	0x28880000
 8000480:	40010000 	.word	0x40010000

08000484 <USART1_IRQHandler>:

extern "C"
{
	//Note: Double check this function name - looks good
	void USART1_IRQHandler(void)
	{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
		//Magic Hack. Make the initial previous command something that we don't use. The XBEE will be sending an IDLE command to the
		//RC car on startup. This will trigger a movment state update and set the robot movement to IDLE
		static char previousCommand = 'Z';
		char command;

		if(USART1->SR & USART_SR_RXNE)
 800048a:	4b28      	ldr	r3, [pc, #160]	; (800052c <USART1_IRQHandler+0xa8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f003 0320 	and.w	r3, r3, #32
 8000492:	2b00      	cmp	r3, #0
 8000494:	bf14      	ite	ne
 8000496:	2301      	movne	r3, #1
 8000498:	2300      	moveq	r3, #0
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d040      	beq.n	8000522 <USART1_IRQHandler+0x9e>
		{
			command = USART1->DR;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <USART1_IRQHandler+0xa8>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	71fb      	strb	r3, [r7, #7]
		}
		else return;

		//Only update if commands are different
		if(previousCommand != command)
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <USART1_IRQHandler+0xac>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	79fa      	ldrb	r2, [r7, #7]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d034      	beq.n	800051a <USART1_IRQHandler+0x96>
		{
			//Parse 'command'
			if(command == 'C')
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b43      	cmp	r3, #67	; 0x43
 80004b4:	d104      	bne.n	80004c0 <USART1_IRQHandler+0x3c>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(FULL_FORWARD);
 80004b6:	2101      	movs	r1, #1
 80004b8:	481e      	ldr	r0, [pc, #120]	; (8000534 <USART1_IRQHandler+0xb0>)
 80004ba:	f7ff fee1 	bl	8000280 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 80004be:	e02c      	b.n	800051a <USART1_IRQHandler+0x96>
			}
			else if(command == 'A')
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2b41      	cmp	r3, #65	; 0x41
 80004c4:	d104      	bne.n	80004d0 <USART1_IRQHandler+0x4c>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
 80004c6:	2100      	movs	r1, #0
 80004c8:	481a      	ldr	r0, [pc, #104]	; (8000534 <USART1_IRQHandler+0xb0>)
 80004ca:	f7ff fed9 	bl	8000280 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 80004ce:	e024      	b.n	800051a <USART1_IRQHandler+0x96>
			}
			else if(command == 'B')
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b42      	cmp	r3, #66	; 0x42
 80004d4:	d104      	bne.n	80004e0 <USART1_IRQHandler+0x5c>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(FULL_REVERSE);
 80004d6:	2102      	movs	r1, #2
 80004d8:	4816      	ldr	r0, [pc, #88]	; (8000534 <USART1_IRQHandler+0xb0>)
 80004da:	f7ff fed1 	bl	8000280 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 80004de:	e01c      	b.n	800051a <USART1_IRQHandler+0x96>
			}
			//Rotation commands
			else if(command == 'I')
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	2b49      	cmp	r3, #73	; 0x49
 80004e4:	d104      	bne.n	80004f0 <USART1_IRQHandler+0x6c>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(TANK_ROTATE_LEFT);
 80004e6:	2103      	movs	r1, #3
 80004e8:	4812      	ldr	r0, [pc, #72]	; (8000534 <USART1_IRQHandler+0xb0>)
 80004ea:	f7ff fec9 	bl	8000280 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 80004ee:	e014      	b.n	800051a <USART1_IRQHandler+0x96>
			}
			else if(command == 'E')
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b45      	cmp	r3, #69	; 0x45
 80004f4:	d104      	bne.n	8000500 <USART1_IRQHandler+0x7c>
			{
				movementController.SetCurrentMovementStateAndUpdateMotorDirection(TANK_ROTATE_RIGHT);
 80004f6:	2104      	movs	r1, #4
 80004f8:	480e      	ldr	r0, [pc, #56]	; (8000534 <USART1_IRQHandler+0xb0>)
 80004fa:	f7ff fec1 	bl	8000280 <_ZN9ECE477_1723RobotMovementController46SetCurrentMovementStateAndUpdateMotorDirectionENS_20ROBOT_MOVEMENT_STATEE>
 80004fe:	e00c      	b.n	800051a <USART1_IRQHandler+0x96>
			}
			//Set Half Speed
			else if(command == 'Q')
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2b51      	cmp	r3, #81	; 0x51
 8000504:	d103      	bne.n	800050e <USART1_IRQHandler+0x8a>
			{
				movementController.SetLowSpeed();
 8000506:	480b      	ldr	r0, [pc, #44]	; (8000534 <USART1_IRQHandler+0xb0>)
 8000508:	f7ff fead 	bl	8000266 <_ZN9ECE477_1723RobotMovementController11SetLowSpeedEv>
 800050c:	e005      	b.n	800051a <USART1_IRQHandler+0x96>
			}
			//Set high speed
			else if(command == 'G')
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b47      	cmp	r3, #71	; 0x47
 8000512:	d102      	bne.n	800051a <USART1_IRQHandler+0x96>
			{
				movementController.SetHighSpeed();
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <USART1_IRQHandler+0xb0>)
 8000516:	f7ff fe99 	bl	800024c <_ZN9ECE477_1723RobotMovementController12SetHighSpeedEv>
			}
		}
		//Update previous command
		previousCommand = command;
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <USART1_IRQHandler+0xac>)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	7013      	strb	r3, [r2, #0]
 8000520:	e000      	b.n	8000524 <USART1_IRQHandler+0xa0>
		else return;
 8000522:	bf00      	nop
	}
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40011000 	.word	0x40011000
 8000530:	20000000 	.word	0x20000000
 8000534:	20000020 	.word	0x20000020

08000538 <_ZN9ECE477_175USART10USART_InitEv>:
	namespace USART
	{
		//USART1 GPIOs are PB6 and PB7 - PCLK2 = 16 MHz
		//Setup GPIO + Registers for the USART
		void USART_Init(void)
		{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
			// GPIO Initialization for USART1 - CHECK IF THIS STILL APPLIES TO STM32F4
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800053c:	4b33      	ldr	r3, [pc, #204]	; (800060c <_ZN9ECE477_175USART10USART_InitEv+0xd4>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	4a32      	ldr	r2, [pc, #200]	; (800060c <_ZN9ECE477_175USART10USART_InitEv+0xd4>)
 8000542:	f043 0302 	orr.w	r3, r3, #2
 8000546:	6313      	str	r3, [r2, #48]	; 0x30

			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000548:	4b30      	ldr	r3, [pc, #192]	; (800060c <_ZN9ECE477_175USART10USART_InitEv+0xd4>)
 800054a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054c:	4a2f      	ldr	r2, [pc, #188]	; (800060c <_ZN9ECE477_175USART10USART_InitEv+0xd4>)
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	6453      	str	r3, [r2, #68]	; 0x44

			// 00 = Input, 01 = Output, 10 = Alternate Function, 11 = Analog
			GPIOB->MODER &= ~(0xF << (2*6)); // Clear mode bits for pin 6 and 7
 8000554:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a2d      	ldr	r2, [pc, #180]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 800055a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800055e:	6013      	str	r3, [r2, #0]
			GPIOB->MODER |= 0xA << (2*6); // Select Alternate Function mode
 8000560:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a2a      	ldr	r2, [pc, #168]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 8000566:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800056a:	6013      	str	r3, [r2, #0]

			// Alternate Function 7 = USART 1
			GPIOB->AFR[0] |= 0x77 << (4*6); // Set pin 6 and 7 to AF7 - CHECK THIS
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 800056e:	6a1b      	ldr	r3, [r3, #32]
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 8000572:	f043 43ee 	orr.w	r3, r3, #1996488704	; 0x77000000
 8000576:	6213      	str	r3, [r2, #32]

			// GPIO Speed: 00 = Low Speed, 01 = Medium Speed, 10 = Fast Speed, 11 = Reserved
			GPIOB->OSPEEDR |= 0xF << (2*6);
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	4a24      	ldr	r2, [pc, #144]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 800057e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000582:	6093      	str	r3, [r2, #8]

			// GPIO push-pull: 00 = No pull-up/down. 01 = Pull up, 10 = Pull down, 11 = Reserved
			GPIOB->PUPDR &= ~ (0xF << (2*6));
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 800058a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800058e:	60d3      	str	r3, [r2, #12]
			GPIOB->PUPDR |= 0x5 << (2*6); // Select pull-up
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 8000596:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 800059a:	60d3      	str	r3, [r2, #12]

			// GPIO Output Type: 0 = push-pull, 1 = open drain
			GPIOB->OTYPER &= ~(0x3<<6);
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <_ZN9ECE477_175USART10USART_InitEv+0xd8>)
 80005a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80005a6:	6053      	str	r3, [r2, #4]

			// Disable USART
			USART1->CR1 &= ~USART_CR1_UE;
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80005b2:	60d3      	str	r3, [r2, #12]

			// Set data length to 8 bits
			// 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
			USART1->CR2 &= ~USART_CR2_STOP;
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005b6:	691b      	ldr	r3, [r3, #16]
 80005b8:	4a16      	ldr	r2, [pc, #88]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005be:	6113      	str	r3, [r2, #16]

			// Set parity control as no parity
			// 0 = no parity
			// 1 = parity enabled (then, program PS bit to select Even or Odd parity)
			USART1->CR1 &= ~USART_CR1_PCE;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005ca:	60d3      	str	r3, [r2, #12]

			// Oversampling by 16
			// 0 = oversampling by 16, 1 = oversampling by 8
			USART1->CR1 &= ~USART_CR1_OVER8;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005d6:	60d3      	str	r3, [r2, #12]

			// Set Baud Rate to 115200 using APB frequency (16 MHz) - NEED TO UPDATE!
			USART1->BRR = 0x8B;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005da:	228b      	movs	r2, #139	; 0x8b
 80005dc:	609a      	str	r2, [r3, #8]

			//USART1 Registers
			USART1->CR1 |= USART_CR1_RXNEIE; //Generate interrupt no receiving data
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	60d3      	str	r3, [r2, #12]
			USART1->CR1 |= USART_CR1_RE; //Enable receiver
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	60d3      	str	r3, [r2, #12]
			USART1->CR1 |= USART_CR1_UE; //Enable USART1
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	4a06      	ldr	r2, [pc, #24]	; (8000614 <_ZN9ECE477_175USART10USART_InitEv+0xdc>)
 80005fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000600:	60d3      	str	r3, [r2, #12]

			//Enable NVIC interrupt
			NVIC_EnableIRQ(USART1_IRQn);
 8000602:	2025      	movs	r0, #37	; 0x25
 8000604:	f7ff fde0 	bl	80001c8 <__NVIC_EnableIRQ>
			//NVIC->ISER[]??

			// Verify USART is ready for reception
			// REACK: Receive enable acknowledge flag. Hardware sets or resets it.
			//while (!(USART1->SR & USART_SR_RXNE));
		}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020400 	.word	0x40020400
 8000614:	40011000 	.word	0x40011000

08000618 <main>:

//Wait function, it is simply a for loop that iterates k times
void fools_wait(uint32_t k){ for(uint32_t i = 0;i < k;i++); }

int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	// USART - comment out for testing
	USART_Init();
 800061c:	f7ff ff8c 	bl	8000538 <_ZN9ECE477_175USART10USART_InitEv>

	//Start PWM Timer
	TIM1_PWM_Init();
 8000620:	f7ff fed0 	bl	80003c4 <_ZN9ECE477_175Timer13TIM1_PWM_InitEv>
	fools_wait(2000000);
	//Set motor movement scheme
	movementController.SetCurrentMovementStateAndUpdateMotorDirection(IDLE);
	*/
	//Infinite loop
	while(true){}
 8000624:	e7fe      	b.n	8000624 <main+0xc>
	...

08000628 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800063e:	4293      	cmp	r3, r2
 8000640:	d102      	bne.n	8000648 <_Z41__static_initialization_and_destruction_0ii+0x20>
RobotMovementController movementController;
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000644:	f7ff fde0 	bl	8000208 <_ZN9ECE477_1723RobotMovementControllerC1Ev>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d107      	bne.n	800065e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000654:	4293      	cmp	r3, r2
 8000656:	d102      	bne.n	800065e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800065a:	f7ff fdec 	bl	8000236 <_ZN9ECE477_1723RobotMovementControllerD1Ev>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000020 	.word	0x20000020

0800066c <_GLOBAL__sub_I_TIM3_IRQHandler>:
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
 8000670:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff ffd7 	bl	8000628 <_Z41__static_initialization_and_destruction_0ii>
 800067a:	bd80      	pop	{r7, pc}

0800067c <_GLOBAL__sub_D_TIM3_IRQHandler>:
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
 8000680:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ffcf 	bl	8000628 <_Z41__static_initialization_and_destruction_0ii>
 800068a:	bd80      	pop	{r7, pc}

0800068c <SystemInit>:
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SystemInit+0x28>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SystemInit+0x28>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <SystemInit+0x28>)
 80006a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <Reset_Handler>:
 80006b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f0 <LoopFillZerobss+0x14>
 80006bc:	2100      	movs	r1, #0
 80006be:	e003      	b.n	80006c8 <LoopCopyDataInit>

080006c0 <CopyDataInit>:
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <LoopFillZerobss+0x18>)
 80006c2:	585b      	ldr	r3, [r3, r1]
 80006c4:	5043      	str	r3, [r0, r1]
 80006c6:	3104      	adds	r1, #4

080006c8 <LoopCopyDataInit>:
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <LoopFillZerobss+0x1c>)
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <LoopFillZerobss+0x20>)
 80006cc:	1842      	adds	r2, r0, r1
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3f6      	bcc.n	80006c0 <CopyDataInit>
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <LoopFillZerobss+0x24>)
 80006d4:	e002      	b.n	80006dc <LoopFillZerobss>

080006d6 <FillZerobss>:
 80006d6:	2300      	movs	r3, #0
 80006d8:	f842 3b04 	str.w	r3, [r2], #4

080006dc <LoopFillZerobss>:
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <LoopFillZerobss+0x28>)
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3f9      	bcc.n	80006d6 <FillZerobss>
 80006e2:	f7ff ffd3 	bl	800068c <SystemInit>
 80006e6:	f000 f811 	bl	800070c <__libc_init_array>
 80006ea:	f7ff ff95 	bl	8000618 <main>
 80006ee:	4770      	bx	lr
 80006f0:	20020000 	.word	0x20020000
 80006f4:	0800077c 	.word	0x0800077c
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000004 	.word	0x20000004
 8000700:	20000004 	.word	0x20000004
 8000704:	20000028 	.word	0x20000028

08000708 <ADC_IRQHandler>:
 8000708:	e7fe      	b.n	8000708 <ADC_IRQHandler>
	...

0800070c <__libc_init_array>:
 800070c:	b570      	push	{r4, r5, r6, lr}
 800070e:	4e0d      	ldr	r6, [pc, #52]	; (8000744 <__libc_init_array+0x38>)
 8000710:	4c0d      	ldr	r4, [pc, #52]	; (8000748 <__libc_init_array+0x3c>)
 8000712:	1ba4      	subs	r4, r4, r6
 8000714:	10a4      	asrs	r4, r4, #2
 8000716:	2500      	movs	r5, #0
 8000718:	42a5      	cmp	r5, r4
 800071a:	d109      	bne.n	8000730 <__libc_init_array+0x24>
 800071c:	4e0b      	ldr	r6, [pc, #44]	; (800074c <__libc_init_array+0x40>)
 800071e:	4c0c      	ldr	r4, [pc, #48]	; (8000750 <__libc_init_array+0x44>)
 8000720:	f000 f818 	bl	8000754 <_init>
 8000724:	1ba4      	subs	r4, r4, r6
 8000726:	10a4      	asrs	r4, r4, #2
 8000728:	2500      	movs	r5, #0
 800072a:	42a5      	cmp	r5, r4
 800072c:	d105      	bne.n	800073a <__libc_init_array+0x2e>
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000734:	4798      	blx	r3
 8000736:	3501      	adds	r5, #1
 8000738:	e7ee      	b.n	8000718 <__libc_init_array+0xc>
 800073a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800073e:	4798      	blx	r3
 8000740:	3501      	adds	r5, #1
 8000742:	e7f2      	b.n	800072a <__libc_init_array+0x1e>
 8000744:	0800076c 	.word	0x0800076c
 8000748:	0800076c 	.word	0x0800076c
 800074c:	0800076c 	.word	0x0800076c
 8000750:	08000774 	.word	0x08000774

08000754 <_init>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	bf00      	nop
 8000758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075a:	bc08      	pop	{r3}
 800075c:	469e      	mov	lr, r3
 800075e:	4770      	bx	lr

08000760 <_fini>:
 8000760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000762:	bf00      	nop
 8000764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000766:	bc08      	pop	{r3}
 8000768:	469e      	mov	lr, r3
 800076a:	4770      	bx	lr
